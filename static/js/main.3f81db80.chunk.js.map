{"version":3,"sources":["Colors.js","Utils.js","RNG.js","components/Interval.js","components/Constants.js","components/Models.js","components/WidgetButton.jsx","components/NodeLegend.js","components/Plot.js","components/Grid.js","components/Figure.js","App.js","serviceWorker.js","index.js"],"names":["Colors","hexString","c","Color","red","green","blue","r","g","b","h","s","l","hsl","c1","c2","fraction","color","alpha","length","min","Math","max","NaN","rgb","a","rep","__helperRep","toString","ratio","__fromHelperRep","whiten","Utils","condition","message","console","log","alert","colors","width","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","height","buffer","Uint8ClampedArray","y","genSize","leftBuffer","floor","rightBuffer","x","pos","canvas","document","createElement","ctx","getContext","idata","createImageData","data","set","putImageData","toDataURL","array1","array2","i","o1","o2","eq","Array","isArray","arraysEqual","RNG","seed","Object","classCallCheck","this","random","m","lastX","createClass","key","num1","num2","int1","int2","Interval","props","_this","possibleConstructorReturn","getPrototypeOf","call","initializeFromProps","nextProps","nextContext","fromConstructor","state","setState","interval","clearInterval","setInterval","callback","milliseconds","Component","defaultProps","Constants","SUSCEPTIBLE_COLOR","EXPOSED_COLOR","INFECTED_COLOR","ISOLATING_COLOR","REMOVED_COLOR","DEAD_COLOR","SUSCEPTIBLE","EXPOSED","INFECTED","REMOVED","DEAD","GridNode","rng","nextState","daysInState","linked","mediaOutlet","specialDegree","dead","isolating","_setState","neighbor","transProb","isSusceptible","setNextState","chanceOfIsolationAfterSymptoms","overHospitalCapacity","daysIncubating","daysSymptomatic","allowDeaths","deathRate","maybeIsolate","isExposed","setInfected","isInfected","setDead","setRemoved","StyledButton","withStyles","root","background","label","textTransform","Button","HighlightedButton","WidgetButton","sty","margin","size","maxWidth","maxHeight","minWidth","minHeight","highlighted","react_default","variant","onClick","e","preventDefault","style","children","React","PureComponent","NodeLegend","type","marginBottom","border","backgroundColor","display","Plot","canvasRef","createRef","showDead","showInfected","showRecovered","componentWillReceiveProps","updateWindowDimensions","bind","assertThisInitialized","documentElement","clientWidth","redraw","updateMaxValues","maxValue","serieses","push","infectedPerDay","recoveredPerDay","deadPerDay","hospitalCapacity","capacityPerDay","_i","v","population","maxDay","current","window","addEventListener","removeEventListener","context","fillStyle","fillRect","setLineDash","lineWidth","zerosPath","infectedPath","recoveredPath","deadPath","topPath","capacityPath","day","infected","recovered","capacity","drawPath","showHospitalCapacity","xcoord","ycoord","strokeStyle","drawLine","fwdpath","backpath","beginPath","moveTo","lineTo","stroke","fill","series","day1","day2","value1","value2","x1","x2","y1","y2","forceUpdate","_this2","infectedPercent","round","recoveredPercent","deadPercent","isNaN","infectedCB","NodeLegend_NodeLegend","recoveredCB","deadCB","showDeaths","widthToUse","className","ref","WidgetButton_WidgetButton","resetArrays","flexDirection","Grid","previousSimulationParams","previousDrawingParams","previousInteractionsParams","onTick","onEnter","onLeave","idealWidth","gridCols","nodeSize","gridWidth","randomSeed","numActiveNodes","playing","visible","decreaseInEncountersAfterSymptoms","hospitalCapacityPct","immunityFraction","longDistaceNetworkActive","addLinkedNodes","maxIterations","personHours","transmissionProbability","travelRadius","centerNodeNeighborsToDisplay","drawNodeOutlines","hospitalCapacitySliderHighlighted","speed","simulateStep","generate","force","currentSimulationParams","gridRows","nug","nRows","nCols","grid","node","immune","linkedNodes","Set","j","setSusceptible","add","addCities","cityCenters","center","cr","cc","distance","sqrt","pow","centerR","centerC","setExposed","dr","dc","abs","startDay","showInteractions","isCenterNode","canInfectOthers","maybeInfect","actualInfectedNodes","getNextState","showChanceOfIsolationAfterSymptomsSlider","overCapacity","endDay","actualDeadNodes","actualRecoveredNodes","neighbors","getNeighbors","tryToInfect","radius","randIntBetween","nr","nc","isIsolating","n","chooseRandomNeighbor","currentDrawingParams","showInteractionsParams","interactionsParamsChanged","drawCell","inInitialPosition","centerNode","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","drawInteraction","r1","r2","w","highlight","isRemoved","isDead","assert","intensity","hex","blend","makeHex","gap","left","wid","top","hei","strokeRect","name","onChange","step","renderPercentage","valueStr","highlightedClass","Slider_default","classes","container","thumbIconWrapper","showAll","showAllControls","transmissionProbabilitySlider","showTransmissionProbabilitySlider","renderSlider","maxTransmissionRate","immunityFractionSlider","hospitalCapacitySlider","showHospitalCapacitySlider","travelRadiusSlider","showTravelRadiusSlider","personHoursSlider","showPersonHoursSlider","daysIncubatingSlider","showDaysPerStateControls","daysSymptomaticSlider","chanceOfIsolationAfterSymptomsSlider","decreaseInEncountersAfterSymptomsSlider","showDecreaseInEncountersAfterSymptomsSlider","deathRateSlider","showDeathRateSlider","sliderName","playbackControls","showPlaybackControls","newNetworkButton","text","fontSize","togglePlaybackButton","togglePlayback","stepButton","toggleLongDistanceNetwork","protip","showProTip","marginTop","intervalMillis","highlightedSlider","plot","showAliveFraction","Plot_Plot","alignItems","es","scrollableAncestor","Interval_Interval","arr","_ref","percent","NEIGHBOR_CLASSES","immunitySliderName","showDegreeSlider","showImmunityFractionSlider","showSimulationButtons","showSpeedControls","Figure","titleDiv","title","captionDiv","caption","cname","image","App","spoilersVisible","spoilerOrNot","showSpoilerButton","cursor","target","checked","exposed_you","susceptible","selfQuarantined","href","Figure_Figure","Grid_Grid","marginLeft","degree","renderEndOfPostDivider","renderSubscribeForm","method","action","id","placeholder","required","showTimestamp","timestamp","divider","src","alt","textAlign","rel","renderHeader","renderMainPost","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f81db80.chunk.js","sourcesContent":["import Color from 'color'\n\nexport default class Colors {\n  static makeHex(hexString: string): any {\n    let c = Color(hexString);\n    return [c.red(), c.green(), c.blue()];\n  }\n\n  static makeRGB(r: number, g: number, b: number): any {\n    // return Color.rgb(r, g, b);\n    return [r, g, b];\n  }\n\n  static makeHSL(h: number, s: number, l: number): any {\n    // return Color.hsl(h, s, l);\n    let c = Color.hsl(h, s, l);\n    return [c.red(), c.green(), c.blue()];\n  }\n\n  static blend(c1: any, c2: any, fraction: number): any {\n    let r = (c2[0] - c1[0]) * fraction + c1[0];\n    let g = (c2[1] - c1[1]) * fraction + c1[1];\n    let b = (c2[2] - c1[2]) * fraction + c1[2];\n    return [r, g, b]\n  }\n\n  static withAlpha(color: any, alpha: number): any {\n    return [color[0], color[1], color[2], alpha]\n  }\n\n  static r(color: any): number {\n    // return color.red();\n    return color[0];\n  }\n\n  static g(color: any): number {\n    // return color.green();\n    return color[1];\n  }\n\n  static b(color: any): number {\n    // return color.blue();\n    return color[2];\n  }\n\n  static a(color: any): number {\n    if (color.length === 4) {\n      return color[3];\n    } else {\n      return 255;\n    }\n  }\n\n  static hue(color: any): number {\n    let r = color[0] / 255,\n        g = color[1] / 255,\n        b = color[2] / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        h = NaN,\n        s = max - min,\n        l = (max + min) / 2;\n    if (s) {\n      if (r === max) h = (g - b) / s + (g < b) * 6;\n      else if (g === max) h = (b - r) / s + 2;\n      else h = (r - g) / s + 4;\n      s /= l < 0.5 ? max + min : 2 - max - min;\n      h *= 60;\n    } else {\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return h;\n  }\n\n  static __helperRep(color: any): Color {\n    return Color.rgb(Colors.r(color), Colors.g(color), Colors.b(color), Colors.a(color));\n  }\n\n  static __fromHelperRep(rep: Color): any {\n    return [rep.red(), rep.green(), rep.blue()]\n  }\n\n  static hex(color: any): string {\n    return Colors.__helperRep(color).toString();\n  }\n\n  static opacity(color: any): number {\n    let alpha = Colors.a(color);\n    return alpha / 255.0;\n  }\n\n  static lighten(color: any, ratio: number): any {\n    return Colors.__fromHelperRep(Colors.__helperRep(color).whiten(ratio))\n  }\n}","import Colors from \"./Colors.js\";\n\nexport default class Utils {\n\n  static assert(condition: boolean, message: string) {\n    if (!condition) {\n      console.log('ACK!', message);\n      alert('ACK! ' + message)\n    }\n  }\n\n  static makeImageUri(colors: any[][]): string {\n    let width = -1;\n    for (let row of colors) {\n      if (row.length > width) {\n        width = row.length;\n      }\n    }\n    let height = colors.length;\n    let buffer = new Uint8ClampedArray(width * height * 4); // have enough bytes\n\n    for (let y = 0; y < height; y++) {\n      let genSize = colors[y].length;\n      let leftBuffer = Math.floor((width - genSize)/2);\n      let rightBuffer = width - genSize - leftBuffer;\n      for (let x = 0; x < genSize; x++) {\n          let c = colors[y][x];\n          let pos = (y * width + leftBuffer + x) * 4; // position in buffer based on x and y\n          buffer[pos  ] = Colors.r(c);   // some R value [0, 255]\n          buffer[pos+1] = Colors.g(c);   // some G value\n          buffer[pos+2] = Colors.b(c);   // some B value\n          buffer[pos+3] = Colors.a(c);   // set alpha channel\n      }\n      for (let x = 0; x < leftBuffer; x++) {\n        let pos = (y * width + x) * 4;\n        buffer[pos]   = 255;\n        buffer[pos+1] = 255;\n        buffer[pos+2] = 255;\n        buffer[pos+3] = 255;\n      }\n      for (let x = genSize + rightBuffer; x < width; x++) {\n        let pos = (y * width + x) * 4;\n        buffer[pos]   = 255;\n        buffer[pos+1] = 255;\n        buffer[pos+2] = 255;\n        buffer[pos+3] = 255;\n      }\n    }\n\n    // create off-screen canvas element\n    let canvas = document.createElement('canvas'),\n        ctx = canvas.getContext('2d');\n\n    canvas.width = width;\n    canvas.height = height;\n\n    // create imageData object\n    let idata = ctx.createImageData(width, height);\n\n    // set our buffer as source\n    idata.data.set(buffer);\n\n    // update canvas with new data\n    ctx.putImageData(idata, 0, 0);\n\n    return canvas.toDataURL()\n  }\n\n  static arraysEqual(array1: any[], array2: any[]): boolean {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n    for (let i = 0; i < array1.length; i++) {\n      let o1 = array1[i];\n      let o2 = array2[i];\n      let eq = (o1 === o2);\n      if (Array.isArray(o1) && Array.isArray(o2)) {\n        eq = Utils.arraysEqual(o1, o2);\n      }\n\n      if (!eq) {\n        return false;\n      }\n    }\n    return true;\n  }\n}","export class RNG {\n  // From http://onehourhacks-gamespot.blogspot.com/2013/02/howto-make-quick-and-dirty-pseudorandom.html\n  static m = 2147483648;\n  static a = 214013;\n  static c = 2531011;\n\n  lastX: number;\n\n  constructor(seed: number|null) {\n    if (seed === null || seed === undefined) {\n      seed = Math.floor(Math.random() * RNG.m);\n    }\n    this.lastX = Math.floor(seed);\n  }\n\n  random(): number {\n    this.lastX = (RNG.a * this.lastX + RNG.c) % RNG.m;\n    // return Math.random();\n    return this.lastX / RNG.m;\n  }\n\n  randBetween(num1: number, num2: number): number {\n    return this.random() * (num2-num1) + num1\n  }\n\n  // inclusive on both sides\n  randIntBetween(int1: number, int2: number): number {\n    let r = this.random() * (int2-int1+1)\n    return Math.floor(r) + int1\n  }\n\n}","import {Component} from \"react\";\n\ntype Props = {\n  milliseconds: number,\n  callback: () => any,\n}\n\ntype State = {\n  // nothing\n}\n\nexport default class Interval extends Component<Props, State> {\n  // Set default props\n  static defaultProps = {\n    // nothing for now\n  };\n\n  interval: any;  // timer for animations\n\n  constructor(props: Props) {\n    super(props);\n\n    this.initializeFromProps(this.props, true);\n  }\n\n  componentWillReceiveProps(nextProps: Props, nextContext: any): void {\n    this.initializeFromProps(nextProps, false);\n  }\n\n  initializeFromProps(props: Props, fromConstructor: boolean) {\n    let state = {\n      // nothing yet\n    };\n    if (fromConstructor) {\n      this.state = state;\n    } else {\n      this.setState(state);\n    }\n\n    if (this.interval !== null && this.interval !== undefined) {\n      clearInterval(this.interval);\n    }\n    this.interval = setInterval(props.callback, props.milliseconds);\n  }\n\n  render() {\n    return null;\n  }\n}","\nexport default class Constants {\n  static SUSCEPTIBLE_COLOR = '#EEE';\n  static EXPOSED_COLOR = '#ffdde2';\n  static INFECTED_COLOR = '#F44';\n  static ISOLATING_COLOR = '#8094ff';\n  static REMOVED_COLOR = '#999';\n  static DEAD_COLOR = '#000';\n\n  static SUSCEPTIBLE = 0;\n  static EXPOSED = 1;\n  static INFECTED = 2;\n  static REMOVED = 3;\n  static DEAD = 4;\n}","import {RNG} from \"../RNG\";\nimport Constants from \"./Constants\";\n\n\nexport class GridNode {\n  r: number;\n  c: number;\n\n  state: number;\n  nextState: number;\n  daysInState: number;\n\n  linked: boolean;\n  mediaOutlet: boolean;\n  specialDegree: number|null;\n  dead: boolean;\n\n  isolating: boolean;\n\n  rng: RNG;\n\n  constructor(rng: RNG, r: number, c: number) {\n    this.r = r;\n    this.c = c;\n\n    this.state = Constants.SUSCEPTIBLE;\n    this.nextState = Constants.SUSCEPTIBLE;\n    this.daysInState = 0;\n\n    this.linked = false;\n    this.mediaOutlet = false;\n    this.specialDegree = null;\n    this.dead = false;\n\n    this.isolating = false;\n\n    this.rng = rng;\n  }\n\n  getState(): number {\n    return this.state;\n  }\n\n  getNextState(): number {\n    return this.nextState;\n  }\n\n  isSusceptible(): boolean {\n    return this.state === Constants.SUSCEPTIBLE;\n  }\n\n  isExposed(): boolean {\n    return this.state === Constants.EXPOSED;\n  }\n\n  isInfected(): boolean {\n    return this.state === Constants.INFECTED;\n  }\n\n  canInfectOthers(): boolean {\n    return this.state === Constants.EXPOSED || this.state === Constants.INFECTED;\n  }\n\n  isRemoved(): boolean {\n    return this.state === Constants.REMOVED;\n  }\n\n  isDead(): boolean {\n    return this.state === Constants.DEAD;\n  }\n\n  isAllowedToBeRemoved(): boolean {\n    return !this.linked;\n  }\n\n  _setState(state: number) {\n    this.state = state;\n  }\n\n  setNextState(state: number) {\n    this.nextState = state;\n  }\n\n  setSusceptible() {\n    this._setState(Constants.SUSCEPTIBLE)\n  }\n\n  setExposed() {\n    this._setState(Constants.EXPOSED)\n  }\n\n  setInfected() {\n    this._setState(Constants.INFECTED)\n  }\n\n  setRemoved() {\n    this._setState(Constants.REMOVED)\n  }\n\n  setDead() {\n    this._setState(Constants.DEAD)\n  }\n\n  startDay() {\n    this.nextState = this.state\n  }\n\n  isIsolating(): boolean {\n    return this.isolating;\n  }\n\n  tryToInfect(neighbor: GridNode, transProb: number) {\n    if (!neighbor.isSusceptible()) {\n      // Can't get infected\n      return;\n    }\n\n    // Test to see if neighbor should get active\n    let infect = this.rng.random() < transProb;\n    if (infect) {\n      let actuallyInfect = true;\n      if (actuallyInfect) {\n        neighbor.setNextState(Constants.EXPOSED);\n      }\n    }\n  }\n\n  maybeIsolate(chanceOfIsolationAfterSymptoms: number) {\n    if (this.rng.random() < chanceOfIsolationAfterSymptoms) {\n      this.isolating = true;\n    }\n  }\n\n  endDay(overHospitalCapacity: boolean,\n         daysIncubating: number,\n         daysSymptomatic: number,\n         allowDeaths: boolean,\n         deathRate: number,\n         chanceOfIsolationAfterSymptoms: number) {\n    if (this.nextState !== this.state) {\n      if (this.nextState === Constants.EXPOSED && daysIncubating === 0) {\n        this.nextState = Constants.INFECTED;\n        this.maybeIsolate(chanceOfIsolationAfterSymptoms);\n      }\n\n      this._setState(this.nextState);\n      this.daysInState = 0;\n    } else {\n      this.daysInState++;\n\n      if (this.isExposed()) {\n        if (this.daysInState >= daysIncubating) {\n          this.setInfected();\n          this.maybeIsolate(chanceOfIsolationAfterSymptoms);\n          this.daysInState = 0;\n        }\n      } else if (this.isInfected()) {\n        if (this.daysInState >= daysSymptomatic) {\n          if (overHospitalCapacity) {\n            deathRate = deathRate * 2;\n          }\n          if (!allowDeaths) {\n            deathRate = 0;\n          }\n\n          if (this.rng.random() < deathRate) {\n            this.setDead();\n          } else {\n            this.setRemoved();\n          }\n\n          this.daysInState = 0;\n        }\n      }\n    }\n  }\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport {withStyles} from \"@material-ui/core\";\n\n\ntype Props = {\n  highlighted?: boolean,\n  onClick: Function,\n  size?: string,\n}\n\nconst StyledButton = withStyles({\n  root: {\n    background: 'linear-gradient(0deg, #f0f0f0 30%, #f8f8f8 90%)',\n    // borderRadius: 3,\n    // border: 0,\n    // color: 'white',\n    // height: 48,\n    // padding: '0 30px',\n    // boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  label: {\n    textTransform: 'capitalize',\n  },\n})(Button);\n\nconst HighlightedButton = withStyles({\n  root: {\n    background: 'linear-gradient(0deg, #ccddff 30%, #ddeeff 90%)',\n    // borderRadius: 3,\n    // border: 0,\n    // color: 'white',\n    // height: 48,\n    // padding: '0 30px',\n    // boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  label: {\n    textTransform: 'capitalize',\n  },\n})(StyledButton);\n\nexport default class WidgetButton extends React.PureComponent<Props> {\n  render() {\n    let sty = {\n      margin: '0.5rem',\n    };\n    if (this.props.size === \"small\") {\n      sty = {\n        margin: '0.5rem',\n        maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'\n      };\n    }\n\n    if (this.props.highlighted) {\n      return (\n        <HighlightedButton variant=\"contained\"\n                      onClick={(e) => { e.preventDefault(); this.props.onClick(e); } }\n                      style={sty}>\n          {this.props.children}\n        </HighlightedButton>\n      )\n    } else {\n      return (\n        <StyledButton variant=\"contained\"\n                      onClick={(e) => { e.preventDefault(); this.props.onClick(e); } }\n                      style={sty}>\n          {this.props.children}\n        </StyledButton>\n      )\n    }\n  }\n}","import React, {Component} from \"react\";\nimport Constants from \"./Constants\";\n\n\nexport default class NodeLegend extends Component<{type: string}> {\n  render() {\n    let color = Constants.SUSCEPTIBLE_COLOR;\n    if (this.props.type === 'exposed') {\n      color = Constants.EXPOSED_COLOR;\n    } else if (this.props.type === 'infected') {\n      color = Constants.INFECTED_COLOR;\n    } else if (this.props.type === 'removed') {\n      color = Constants.REMOVED_COLOR;\n    } else if (this.props.type === 'dead') {\n      color = Constants.DEAD_COLOR;\n    }\n    return <div style={{marginBottom: \"-2px\", border: \"1px black solid\", width: \"1rem\", height: \"1rem\", backgroundColor: color, display: \"inline-block\"}}/>;\n  }\n}","import {Component} from \"react\";\nimport React from \"react\";\nimport Constants from \"./Constants\";\nimport WidgetButton from \"./WidgetButton\"\nimport NodeLegend from \"./NodeLegend\"\n\n\ntype Props = {\n  hospitalCapacity: number,\n  capacityPerDay: number[],\n  deadPerDay: number[],\n  infectedPerDay: number[],\n  population: number,\n  recoveredPerDay: number[],\n  showDeaths: boolean,\n}\n\ntype State = {\n  showDead: boolean,\n  showInfected: boolean,\n  showRecovered: boolean,\n}\n\nconst REMOVED_COLOR = '#A8A8A8';\n\nexport default class Plot extends Component<Props, State> {\n\n  width: number;\n  height: number;\n\n  maxDay: number;\n  maxValue: number;\n\n  canvasRef: any;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.width = null;\n    this.height = 150;\n\n    this.canvasRef = React.createRef();\n\n    this.state = {\n      showDead: true,\n      showInfected: true,\n      showRecovered: true,\n    }\n\n    this.componentWillReceiveProps(props);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  updateWindowDimensions() {\n    let idealWidth = 600;\n    let maxWidth = Math.min(idealWidth, document.documentElement.clientWidth - 60);\n\n    if (this.width !== maxWidth) {\n      this.width = maxWidth;\n      this.redraw();\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props, nextContext: any): void {\n    this.updateMaxValues(nextProps)\n  }\n\n  updateMaxValues(nextProps: Props): void {\n    this.maxValue = 1;\n\n    let serieses = [];\n    if (this.state.showInfected) {\n      serieses.push(nextProps.infectedPerDay);\n    }\n    if (this.state.showRecovered) {\n      serieses.push(nextProps.recoveredPerDay);\n    }\n    if (this.state.showDead) {\n      serieses.push(nextProps.deadPerDay);\n    }\n    if (nextProps.hospitalCapacity > -1) {\n      serieses.push(nextProps.capacityPerDay);\n    }\n\n    for (let i = 0; i < nextProps.infectedPerDay.length; i++) {\n      for (let series of serieses) {\n        let v = series[i];\n        if (v !== null && v > this.maxValue) {\n          this.maxValue = v;\n        }\n      }\n    }\n\n    this.maxValue *= 1.1;\n\n    this.maxValue = this.props.population;\n\n    this.maxDay = Math.max(nextProps.infectedPerDay.length - 1, 1);\n  }\n\n  componentDidMount() {\n    this.canvas = this.canvasRef.current;\n\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n\n    this.redraw();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  showHospitalCapacity(): boolean {\n    return this.props.hospitalCapacity > -1;\n  }\n\n  redraw() {\n    if (this.canvas === null || this.canvas === undefined) {\n      return;\n    }\n\n    this.updateMaxValues(this.props);\n\n    let context = this.canvas.getContext('2d');\n\n    context.fillStyle = Constants.SUSCEPTIBLE_COLOR;\n    context.fillRect(0, 0, this.width, this.height);\n\n    context.setLineDash([]);\n    context.lineWidth = 2;\n\n    // if (this.state.showInfected || true) {\n    //   context.strokeStyle = Constants.INFECTED_COLOR;\n    //   for (let i = 1; i < this.props.infectedPerDay.length; i++) {\n    //     let day1 = i - 1\n    //     let day2 = i\n    //     let value1 = this.props.infectedPerDay[day1]\n    //     let value2 = this.props.infectedPerDay[day2]\n    //\n    //     if (value2 === null) {\n    //       context.strokeStyle = '#000';\n    //       context.lineWidth = 1;\n    //       this.drawLine(context, day2, 0, day2, this.maxValue);\n    //       context.strokeStyle = Constants.INFECTED_COLOR;\n    //       context.lineWidth = 2;\n    //     }\n    //     if (value1 === null || value2 === null) {\n    //       continue;\n    //     }\n    //\n    //     if (this.state.showInfected) {\n    //       if (this.showHospitalCapacity()) {\n    //         if (value1 > this.props.hospitalCapacity && value2 > this.props.hospitalCapacity) {\n    //           context.fillStyle = '#ffd6dd';\n    //           context.beginPath();\n    //           context.moveTo(this.xcoord(day1), this.ycoord(this.props.hospitalCapacity));\n    //           context.lineTo(this.xcoord(day1), this.ycoord(value1));\n    //           context.lineTo(this.xcoord(day2), this.ycoord(value2));\n    //           context.lineTo(this.xcoord(day2), this.ycoord(this.props.hospitalCapacity));\n    //           context.fill();\n    //         }\n    //       }\n    //\n    //       this.drawLine(context, day1, value1, day2, value2);\n    //     }\n    //   }\n    // }\n    //\n    // if (this.state.showRecovered) {\n    //   context.strokeStyle = REMOVED_COLOR;\n    //   this.drawSeries(this.props.recoveredPerDay, context);\n    // }\n    //\n    // if (this.state.showDead) {\n    //   context.strokeStyle = Constants.DEAD_COLOR;\n    //   this.drawSeries(this.props.deadPerDay, context);\n    // }\n\n\n    // for (let i = 0; i < this.props.infectedPerDay.length; i++) {\n    //   let day = i;\n    //   let infected = this.props.infectedPerDay[day];\n    //\n    //   if (infected === null) {\n    //     context.fillStyle = '#000';\n    //     // this.drawLine(context, day+0.5, 0, day+0.5, this.maxValue);\n    //     this.drawBar(context, day, 0, day+1, this.maxValue);\n    //   } else {\n    //     let recovered = this.props.recoveredPerDay[day];\n    //     let dead = this.props.deadPerDay[day];\n    //     let susceptible = this.props.population - infected - recovered - dead;\n    //\n    //     context.lineWidth = 1;\n    //\n    //     context.fillStyle = Constants.INFECTED_COLOR;\n    //     this.drawBar(context, day, 0, day+1, infected);\n    //\n    //     context.fillStyle = Constants.SUSCEPTIBLE_COLOR;\n    //     this.drawBar(context, day, infected, day+1, infected+susceptible);\n    //\n    //     context.fillStyle = REMOVED_COLOR;\n    //     this.drawBar(context, day, infected+susceptible, day+1, infected+susceptible+recovered);\n    //\n    //     context.fillStyle = Constants.DEAD_COLOR;\n    //     this.drawBar(context, day, infected+susceptible+recovered, day+1, infected+susceptible+recovered+dead);\n    //   }\n    // }\n\n    let zerosPath = [];\n    let infectedPath = [];\n    let recoveredPath = [];\n    let deadPath = [];\n    let topPath = [];\n    let capacityPath = [];\n\n    for (let i = 0; i < this.props.infectedPerDay.length; i++) {\n      let day = i;\n      let infected = this.props.infectedPerDay[day];\n      let recovered = this.props.recoveredPerDay[day];\n      let dead = this.props.deadPerDay[day];\n      let susceptible = this.props.population - infected - recovered - dead;\n      let capacity = this.props.capacityPerDay[day];\n      if (infected === null) {\n        // this.drawPath(zerosPath, infectedPath, context, Constants.INFECTED_COLOR);\n        // this.drawPath(recoveredPath, deadPath, context, REMOVED_COLOR);\n        // this.drawPath(deadPath, topPath, context, Constants.DEAD_COLOR);\n        this.drawPath(zerosPath, infectedPath, context, Constants.INFECTED_COLOR);\n        this.drawPath(infectedPath, recoveredPath, context, REMOVED_COLOR);\n        this.drawPath(recoveredPath, deadPath, context, Constants.DEAD_COLOR);\n        if (this.showHospitalCapacity()) {\n          this.drawPath(capacityPath, capacityPath, context, '#000');\n        }\n        zerosPath.length = 0;\n        infectedPath.length = 0;\n        recoveredPath.length = 0;\n        deadPath.length = 0;\n        topPath.length = 0;\n        capacityPath.length = 0;\n      } else {\n        zerosPath.push([this.xcoord(day), this.ycoord(0)]);\n        infectedPath.push([this.xcoord(day), this.ycoord(infected)]);\n        recoveredPath.push([this.xcoord(day), this.ycoord(infected+recovered)]);\n        deadPath.push([this.xcoord(day), this.ycoord(infected+recovered+dead)]);\n        topPath.push([this.xcoord(day), this.ycoord(this.maxValue)]);\n        capacityPath.push([this.xcoord(day), this.ycoord(capacity)]);\n      }\n    }\n    this.drawPath(zerosPath, infectedPath, context, Constants.INFECTED_COLOR);\n    this.drawPath(infectedPath, recoveredPath, context, REMOVED_COLOR);\n    this.drawPath(recoveredPath, deadPath, context, Constants.DEAD_COLOR);\n\n    if (this.showHospitalCapacity()) {\n      this.drawPath(capacityPath, capacityPath, context, '#000');\n    }\n\n    for (let i = 0; i < this.props.infectedPerDay.length; i++) {\n      let day = i;\n      let infected = this.props.infectedPerDay[day];\n\n      if (infected === null) {\n        context.strokeStyle = '#000';\n        context.lineWidth = 2;\n        context.setLineDash([5, 5]);\n        this.drawLine(context, day-1, 0, day-1, this.maxValue);\n      }\n    }\n\n    // if (this.showHospitalCapacity()) {\n    //   context.strokeStyle = '#000';\n    //   context.setLineDash([5, 5]);\n    //   context.lineWidth = 1;\n    //   this.drawLine(context, 0, this.props.hospitalCapacity, this.maxDay, this.props.hospitalCapacity);\n    // }\n\n    context.strokeStyle = '#000';\n    context.setLineDash([]);\n    context.lineWidth = 1;\n    this.drawLine(context, 0, 0, 0, this.maxValue);\n    this.drawLine(context, 0, 0, this.maxDay, 0);\n  }\n\n  drawPath(fwdpath: number[][], backpath: number[][], context, color) {\n    if (fwdpath.length === 0) {\n      return;\n    }\n\n    context.beginPath();\n    context.moveTo(fwdpath[0][0], fwdpath[0][1]);\n    for (let i = 0; i < fwdpath.length; i++) {\n      context.lineTo(fwdpath[i][0], fwdpath[i][1]);\n    }\n    if (fwdpath !== backpath) {\n      for (let i = backpath.length - 1; i >= 0; i--) {\n        context.lineTo(backpath[i][0], backpath[i][1]);\n      }\n    }\n\n    if (fwdpath === backpath) {\n      context.strokeStyle = color;\n      context.lineWidth = 2;\n      context.setLineDash([5, 5]);\n      context.stroke();\n    } else {\n      context.fillStyle = color;\n      context.fill();\n    }\n  }\n\n  drawSeries(series: number[], context) {\n    for (let i = 1; i < series.length; i++) {\n      let day1 = i - 1\n      let day2 = i\n      let value1 = series[day1]\n      let value2 = series[day2]\n      if (value1 === null || value2 === null) {\n        continue;\n      }\n      this.drawLine(context, day1, value1, day2, value2);\n    }\n  }\n\n  xcoord(day: number): number {\n    return this.width * day / this.maxDay;\n  }\n\n  ycoord(value: number): number {\n    return (this.height-1) * (1 - value / this.maxValue);\n  }\n\n  drawBar(context: any, day1: number, value1: number, day2: number, value2: number) {\n    let x1 = this.xcoord(day1);\n    let x2 = this.xcoord(day2);\n    let y1 = this.ycoord(value1);\n    let y2 = this.ycoord(value2);\n    context.fillRect(x1, y1, x2-x1, y2-y1);\n  }\n\n  drawLine(context: any, day1: number, value1: number, day2: number, value2: number) {\n    context.beginPath();\n    context.moveTo(this.xcoord(day1), this.ycoord(value1));\n    context.lineTo(this.xcoord(day2), this.ycoord(value2));\n    context.stroke();\n  }\n\n  resetArrays() {\n    this.props.capacityPerDay.length = 0;\n    this.props.deadPerDay.length = 0;\n    this.props.infectedPerDay.length = 0;\n    this.props.recoveredPerDay.length = 0;\n\n    this.redraw();\n    this.forceUpdate();\n  }\n\n  render() {\n    this.redraw();\n\n    let infectedPercent = Math.round(this.props.infectedPerDay[this.props.infectedPerDay.length - 1] / this.props.population * 100);\n    let recoveredPercent = Math.round(this.props.recoveredPerDay[this.props.recoveredPerDay.length - 1] / this.props.population * 100);\n    let deadPercent = Math.round(this.props.deadPerDay[this.props.deadPerDay.length - 1] / this.props.population * 100);\n\n    if (isNaN(infectedPercent)) {\n      infectedPercent = 0;\n    }\n    if (isNaN(recoveredPercent)) {\n      recoveredPercent = 0;\n    }\n    if (isNaN(deadPercent)) {\n      deadPercent = 0;\n    }\n\n    // let infectedCB = <label><input type=\"checkbox\" checked={this.state.showInfected} onChange={(e) => this.setState({showInfected: e.target.checked})}/> Infected: {infectedPercent}%</label>\n    let infectedCB = <span><NodeLegend type=\"infected\"/> &nbsp;Инфецированы: {infectedPercent}%</span>\n\n    // let recoveredCB = <label><input type=\"checkbox\" checked={this.state.showRecovered} onChange={(e) => this.setState({showRecovered: e.target.checked})}/> Recovered: {recoveredPercent}%</label>\n    let recoveredCB = <span><NodeLegend type=\"removed\"/> &nbsp;Выздоровели: {recoveredPercent}%</span>\n\n    let deadCB = null;\n    if (this.props.showDeaths) {\n      // deadCB = <label><input type=\"checkbox\" checked={this.state.showDead} onChange={(e) => this.setState({showDead: e.target.checked})}/> Dead: {deadPercent}%</label>\n      deadCB = <span><NodeLegend type=\"dead\"/> <span style={{backgroundColor: '#FFA'}}>&nbsp;Погибли: {deadPercent}%&nbsp;</span></span>\n    }\n\n    let widthToUse = this.width;\n    if (widthToUse === null) {\n      widthToUse = 300;\n    }\n\n    return (\n      <div>\n        <div className=\"plot-container\">\n          {/*<div className=\"plot-yaxis\">population</div>*/}\n          <div className=\"plot-xaxis\">время ⟶</div>\n          <div className=\"plot-chart\">\n            <canvas ref={this.canvasRef} width={widthToUse} height={this.height} />\n          </div>\n          <div className=\"plot-legend\">\n            <div className=\"plot-legend-button\">\n              <WidgetButton onClick={() => {this.resetArrays()}}>Очистить</WidgetButton>\n            </div>\n            <div style={{display: 'flex', flexDirection: 'column'}}>\n              <div>{infectedCB}</div>\n              <div>{recoveredCB}</div>\n              <div>{deadCB}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","// @flow\n\nimport React, {Component} from 'react'\nimport '../App.css';\nimport Utils from \"../Utils\";\nimport Slider from '@material-ui/lab/Slider';\nimport {RNG} from \"../RNG\";\nimport Interval from \"./Interval\";\nimport {GridNode} from \"./Models\";\nimport Colors from \"../Colors\";\nimport Waypoint from \"react-waypoint\";\nimport WidgetButton from \"./WidgetButton\";\nimport Plot from \"./Plot\"\nimport Constants from \"./Constants\";\n\n\ntype Props = {\n  randomSeed?: number,\n\n  // Network\n  addCities?: boolean,\n  addLinkedNodes?: boolean,\n  gridCols?: number,\n  gridRows?: number,\n\n  // Simulation parameters\n  daysIncubating?: number,\n  daysSymptomatic?: number,\n  deathRate?: number,\n  decreaseInEncountersAfterSymptoms?: number,\n  chanceOfIsolationAfterSymptoms?: number,\n  hospitalCapacityPct?: number,\n  immunityFraction?: number,\n  maxActiveNodes?: number,\n  maxIterations?: number,\n  personHours?: number,\n  transmissionProbability?: number,\n  travelRadius?: number,\n\n  // Rendering parameters\n  drawNodeOutlines?: boolean,\n  nodeSize?: number,\n  speed?: number,\n\n  // Controls\n  highlight?: string,\n  immunitySliderName?: string,\n  maxTransmissionRate?: number,\n  showAliveFraction?: boolean,\n  showAllControls?: boolean,\n  showDaysPerStateControls?: boolean,\n  showDeaths?: boolean,\n  showDeathRateSlider?: boolean,\n  showDecreaseInEncountersAfterSymptomsSlider?: boolean,\n  showChanceOfIsolationAfterSymptomsSlider?: boolean,\n  showDegreeSlider?: boolean,\n  showHospitalCapacitySlider?: boolean,\n  showImmunityFractionSlider?: boolean,\n  showInteractions?: boolean,\n  showPersonHoursSlider?: boolean,\n  showPlaybackControls?: boolean,\n  showProTip?: boolean,\n  showSimulationButtons?: boolean,\n  showSpeedControls?: boolean,\n  showTransmissionProbabilitySlider?: boolean,\n  showTravelRadiusSlider?: boolean,\n}\n\ntype State = {\n  numActiveNodes: number,\n  playing: boolean,\n  visible: boolean,\n\n  // Network\n\n  // Simulation\n  daysIncubating: number,\n  daysSymptomatic: number,\n  deathRate: number,\n  decreaseInEncountersAfterSymptoms: number,\n  chanceOfIsolationAfterSymptoms: number,\n  hospitalCapacityPct: number,\n  immunityFraction: number,\n  longDistaceNetworkActive: boolean,\n  maxIterations: number,\n  personHours: number,\n  transmissionProbability: number,\n  travelRadius: number,\n\n  // Rendering\n  centerNodeNeighborsToDisplay: GridNode[];\n  drawNodeOutlines: boolean,\n  gridWidth: number,\n  hospitalCapacitySliderHighlighted: boolean,\n  nodeSize: number,\n  speed: number,  // between 0 and 1\n\n  // Outcomes\n  capacityPerDay: number[],\n  deadPerDay: number[],\n  infectedPerDay: number[],\n  recoveredPerDay: number[],\n}\n\nexport default class Grid extends Component<Props, State> {\n  // noinspection DuplicatedCode\n  static NEIGHBOR_CLASSES = [\n      [[0, 0]],\n      [[-1, 0], [1, 0], [0, -1], [0, 1]],\n      [[-1, -1], [-1, 1], [1, -1], [1, 1]],\n      [[-2, -2], [-2, -1], [-2, 0], [-2, 1], [-2, 2], [-1, 2], [0, 2], [1, 2], [2, 2], [2, 1], [2, 0], [2, -1], [2, -2], [1, -2], [0, -2], [-1, -2]],\n  ];\n\n  // Set default props\n  static defaultProps = {\n    randomSeed: -1,\n\n    // Network\n    addCities: false,\n    addLinkedNodes: false,\n    gridCols: 1,\n    gridRows: 1,\n\n    // Simulation parameters\n    daysIncubating: 7,\n    daysSymptomatic: 8,\n    deathRate: 0.03,\n    decreaseInEncountersAfterSymptoms: 0.25,\n    chanceOfIsolationAfterSymptoms: 0.25,\n    hospitalCapacityPct: -1,\n    immunityFraction: 0,\n    maxIterations: -1,\n    nug: 20,\n    personHours: 10,\n    transmissionProbability: 0.4,\n    travelRadius: 5,\n\n    // Rendering parameters\n    drawNodeOutlines: true,\n    speed: 0.5,\n\n    // Controls\n    immunitySliderName: \"Immunity\",\n    maxTransmissionRate: 1,\n    showAliveFraction: false,\n    showAllControls: false,\n    showDaysPerStateControls: false,\n    showDeaths: false,\n    showDecreaseInEncountersAfterSymptomsSlider: false,\n    showChanceOfIsolationAfterSymptomsSlider: false,\n    showDeathRateSlider: false,\n    showDegreeSlider: false,\n    showHospitalCapacitySlider: false,\n    showImmunityFractionSlider: false,\n    showInteractions: true,\n    showPersonHoursSlider: false,\n    showPlaybackControls: true,\n    showProTip: false,\n    showSimulationButtons: false,\n    showSpeedControls: false,\n    showTransmissionProbabilitySlider: false,\n    showTravelRadiusSlider: false,\n  };\n\n  grid: GridNode[][];\n  rng: RNG;\n\n  // Weird rendering parameters; don't want React trying to auto-manage these\n  gridWidth: number;\n  nodeSize: number;\n\n  canvasRef: any;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n\n    this.previousSimulationParams = ['foo'];\n\n    this.previousDrawingParams = [];\n    this.previousInteractionsParams = [];\n\n    this.onTick = this.onTick.bind(this);\n    this.onEnter = this.onEnter.bind(this);\n    this.onLeave = this.onLeave.bind(this);\n\n    this.initializeFromProps(this.props, true);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  updateWindowDimensions() {\n    let idealWidth = this.props.gridCols * this.props.nodeSize;\n    if (this.props.nodeSize >= 5) {\n      idealWidth += this.props.gridCols;\n    }\n\n    let gridWidth = Math.min(idealWidth, document.documentElement.clientWidth - 40);\n    let nodeSize = Math.floor(gridWidth / this.props.gridCols);\n\n    gridWidth = nodeSize * this.props.gridCols;\n\n    if (this.gridWidth !== gridWidth || this.nodeSize !== nodeSize) {\n      this.gridWidth = gridWidth;\n      this.nodeSize = nodeSize;\n      this.redraw(true);\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props, nextContext: any): void {\n    // this.initializeFromProps(nextProps, false);\n  }\n\n  initializeFromProps(props: Props, fromConstructor: boolean) {\n    this.gridWidth = props.gridCols * props.nodeSize;\n    this.nodeSize = props.nodeSize;\n\n    let randomSeed = props.randomSeed;\n    if (randomSeed === -1) {\n      randomSeed = Math.floor(Math.random() * 3000000);\n    }\n    this.rng = new RNG(randomSeed);\n\n    let state = {\n      numActiveNodes: 0,\n      playing: false,\n      visible: false,\n\n      // Network\n\n      // Simulation\n      daysIncubating: props.daysIncubating,\n      daysSymptomatic: props.daysSymptomatic,\n      deathRate: props.deathRate,\n      decreaseInEncountersAfterSymptoms: props.decreaseInEncountersAfterSymptoms,\n      chanceOfIsolationAfterSymptoms: props.chanceOfIsolationAfterSymptoms,\n      hospitalCapacityPct: props.hospitalCapacityPct,\n      immunityFraction: props.immunityFraction,\n      longDistaceNetworkActive: props.addLinkedNodes,\n      maxIterations: props.maxIterations,\n      personHours: props.personHours,\n      transmissionProbability: props.transmissionProbability,\n      travelRadius: props.travelRadius,\n\n      // Rendering\n      centerNodeNeighborsToDisplay: [],\n      drawNodeOutlines: props.drawNodeOutlines,\n      hospitalCapacitySliderHighlighted: false,\n      speed: props.speed,\n\n      // Outcomes\n      capacityPerDay: [],\n      deadPerDay: [],\n      infectedPerDay: [],\n      recoveredPerDay: [],\n    };\n    if (fromConstructor) {\n      this.state = state;\n    } else {\n      this.setState(state);\n    }\n  }\n\n  componentDidMount() {\n    this.canvas = this.canvasRef.current;\n\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n\n    // this.regenerate();\n    this.redraw(true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  onTick() {\n    if (this.state.playing && this.state.visible) {\n      this.simulateStep();\n      // this.simulateStep();\n      // this.simulateStep();\n      // this.simulateStep();\n      this.redraw(true);\n    }\n  }\n\n  onEnter() {\n    this.setState({\n      visible: true,\n    });\n    this.redraw(true);\n  }\n\n  onLeave() {\n    this.setState({\n      visible: false,\n    });\n  }\n\n  static shuffleInPlace(arr, rng: RNG) {\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(rng.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n\n  regenerate() {\n    this.generate();\n    this.forceUpdate();\n  }\n\n  resetPlotVariables() {\n    this.state.capacityPerDay = [];\n    this.state.deadPerDay = [];\n    this.state.infectedPerDay = [];\n    this.state.recoveredPerDay = [];\n  }\n\n  generate(force: boolean) {\n    // actually regenerate iff any of the simulation parameters have changed\n    let currentSimulationParams = [\n        // this.state.immunityFraction,\n    ];\n    if (!force && Utils.arraysEqual(this.previousSimulationParams, currentSimulationParams)) {\n      // console.log('rejecting generate');\n      return;\n    }\n\n    this.previousSimulationParams = currentSimulationParams;\n\n    // console.log('Generating new network');\n\n\n    if (this.state.infectedPerDay.length > 1 && this.state.infectedPerDay[this.state.infectedPerDay.length-2] !== null) {\n      this.state.capacityPerDay.push(null);\n      this.state.deadPerDay.push(null);\n      this.state.infectedPerDay.push(null);\n      this.state.recoveredPerDay.push(null);\n    }\n    if (this.state.infectedPerDay.length === 0 || this.state.infectedPerDay[this.state.infectedPerDay.length-1] === null) {\n      this.state.capacityPerDay.push(this.state.hospitalCapacityPct * this.props.gridRows * this.props.gridRows);\n      this.state.deadPerDay.push(0);\n      this.state.infectedPerDay.push(this.props.nug);\n      this.state.recoveredPerDay.push(0);\n    }\n\n    this.state.centerNodeNeighborsToDisplay = [];\n\n    let nRows = this.props.gridRows;\n    let nCols = this.props.gridCols;\n\n    // Initialize grid\n    this.grid = [];\n    for (let r = 0; r < nRows; r++) {\n      let row = [];\n      for (let c = 0; c < nCols; c++) {\n        let node = new GridNode(this.rng, r, c);\n        node.immune = this.rng.random() < this.state.immunityFraction;\n\n        row.push(node);\n      }\n      this.grid.push(row);\n    }\n\n    // Add linked nodes\n    // noinspection JSMismatchedCollectionQueryUpdate\n    let linkedNodes: Set<GridNode> = new Set();\n    if (this.props.addLinkedNodes) {\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          let r = Math.floor((nRows / 6) * (2 * i + 1));\n          let c = Math.floor((nCols / 6) * (2 * j + 1));\n          let node = this.grid[r][c];\n          node.linked = true;\n          node.setSusceptible();  // make sure it's not removed\n          linkedNodes.add(node);\n        }\n      }\n    }\n\n    // Add cities\n    if (this.props.addCities) {\n      let cityCenters = [];\n      cityCenters.push([Math.floor(3/4 * nRows), Math.floor(1/4 * nCols)]);\n      cityCenters.push([Math.floor(1/4 * nRows), Math.floor(3/4 * nCols)]);\n      for (let r = 0; r < nRows; r++) {\n        for (let c = 0; c < nCols; c++) {\n          for (let center of cityCenters) {\n            let cr = center[0];\n            let cc = center[1];\n            let distance = Math.sqrt(Math.pow(cr - r, 2) + Math.pow(cc - c, 2));\n            if (distance <= 16) {\n              this.grid[r][c].specialDegree = 8 - Math.floor(distance/4);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize nug\n    let centerR = Math.floor((nRows - 1) / 2);\n    let centerC = Math.floor((nCols - 1) / 2);\n    if (this.props.nug === 1) {\n      if (this.state.daysIncubating === 0) {\n        this.grid[centerR][centerC].setInfected();\n      } else {\n        this.grid[centerR][centerC].setExposed();\n      }\n    } else if (this.props.nug === 5) {\n      for (let dr = -1; dr <= 1; dr++) {\n        for (let dc = -1; dc <= 1; dc++) {\n          if (Math.abs(dr) === 1 && Math.abs(dc) === 1) {\n            continue;\n          }\n\n          this.grid[centerR+dr][centerC+dc].setExposed();\n        }\n      }\n    } else if (this.props.nug === 20) {\n      for (let dr = -2; dr <= 2; dr++) {\n        for (let dc = -2; dc <= 2; dc++) {\n          if (Math.abs(dr) === 2 && Math.abs(dc) === 2) {\n            continue;\n          }\n\n          this.grid[centerR+dr][centerC+dc].setExposed();\n        }\n      }\n    }\n\n    this.redraw(true);\n    this.setState({\n      numActiveNodes: this.props.nug,\n    })\n  }\n\n  simulateStep() {\n    let nRows = this.props.gridRows;\n    let nCols = this.props.gridCols;\n\n    // let actualRemovedCells = 0;\n    let linkedNodes: Set<GridNode> = new Set();\n\n    // Start day\n    for (let r = 0; r < nRows; r++) {\n      for (let c = 0; c < nCols; c++) {\n        let node = this.grid[r][c];\n        node.startDay();\n        if (this.state.longDistaceNetworkActive && node.linked) {\n          linkedNodes.add(node);\n        }\n      }\n    }\n\n    // Infect\n    let centerNodeNeighborsToDisplay = [];\n    for (let r = 0; r < nRows; r++) {\n      for (let c = 0; c < nCols; c++) {\n        let node = this.grid[r][c];\n        if (this.props.showInteractions && this.isCenterNode(r, c) && node.canInfectOthers()) {\n          centerNodeNeighborsToDisplay = this.maybeInfect(node, r, c, linkedNodes);\n        } else {\n          this.maybeInfect(node, r, c, linkedNodes);\n        }\n      }\n    }\n\n    // End day\n    let actualInfectedNodes = 0;\n    for (let r = 0; r < nRows; r++) {\n      for (let c = 0; c < nCols; c++) {\n        let node = this.grid[r][c];\n        if (node.getNextState() === Constants.EXPOSED || node.getNextState() === Constants.INFECTED) {\n          actualInfectedNodes++;\n        }\n      }\n    }\n    let chanceOfIsolationAfterSymptoms = this.state.chanceOfIsolationAfterSymptoms;\n    if (!this.props.showChanceOfIsolationAfterSymptomsSlider) {\n      chanceOfIsolationAfterSymptoms = 0;\n    }\n    let overCapacity = this.state.hospitalCapacityPct > -1 && actualInfectedNodes > this.state.hospitalCapacityPct * (nRows*nCols);\n    for (let r = 0; r < nRows; r++) {\n      for (let c = 0; c < nCols; c++) {\n        let node = this.grid[r][c];\n        node.endDay(overCapacity,\n            this.state.daysIncubating,\n            this.state.daysSymptomatic,\n            this.props.showDeaths,\n            this.state.deathRate,\n            chanceOfIsolationAfterSymptoms);\n      }\n    }\n    let actualDeadNodes = 0;\n    let actualRecoveredNodes = 0;\n    for (let r = 0; r < nRows; r++) {\n      for (let c = 0; c < nCols; c++) {\n        let node = this.grid[r][c];\n        if (node.getNextState() === Constants.REMOVED) {\n          actualRecoveredNodes++;\n        } else if (node.getNextState() === Constants.DEAD) {\n          actualDeadNodes++;\n        }\n      }\n    }\n    this.state.capacityPerDay.push(this.state.hospitalCapacityPct * this.props.gridRows * this.props.gridRows);\n    this.state.deadPerDay.push(actualDeadNodes);\n    this.state.infectedPerDay.push(actualInfectedNodes);\n    this.state.recoveredPerDay.push(actualRecoveredNodes);\n\n    this.state.centerNodeNeighborsToDisplay = centerNodeNeighborsToDisplay;\n\n    // Update the number of active nodes, and the playing bit if necessary\n    this.setState({\n      numActiveNodes: actualInfectedNodes,\n      playing: this.state.playing && actualInfectedNodes !== 0,\n    });\n\n    this.redraw(true);\n  }\n\n  isCenterNode(r: number, c: number): boolean {\n    return r === c && r === Math.floor(this.props.gridRows / 2);\n  }\n\n  maybeInfect(node: GridNode, r: number, c: number, linkedNodes: Set<GridNode>): GridNode[] {\n    let neighbors = [];\n    if (node.canInfectOthers() || this.isCenterNode(r, c)) {\n      neighbors = this.getNeighbors(node, r, c, linkedNodes);\n    }\n\n    if (node.canInfectOthers()) {\n      let transProb = this.state.transmissionProbability;\n      transProb = Math.pow(transProb, 3);\n\n      for (let neighbor of neighbors) {\n        node.tryToInfect(neighbor, transProb);\n      }\n    }\n    return neighbors;\n  }\n\n  chooseRandomNeighbor(node: GridNode, r: number, c: number): GridNode {\n    let radius = this.state.travelRadius;\n\n    let neighbor = null;\n    while (neighbor === null) {\n      let dr = this.rng.randIntBetween(-radius, radius);\n      let dc = this.rng.randIntBetween(-radius, radius);\n\n      if (dr === 0 && dc === 0) {\n        continue;\n      }\n\n      // special case for radius 1: only immediate neighbors\n      if (radius === 1) {\n        if (Math.abs(dr) === 1 && Math.abs(dc) === 1) {\n          continue;\n        }\n      }\n\n      let nr = r + dr;\n      let nc = c + dc;\n\n      if (nr < 0 || nr >= this.grid.length || nc < 0 || nc >= this.grid[0].length) {\n        continue;\n      }\n\n      neighbor = this.grid[nr][nc];\n    }\n    return neighbor;\n  }\n\n  // noinspection JSUnusedLocalSymbols\n  getNeighbors(node: GridNode, r: number, c: number, linkedNodes: Set<GridNode>): GridNode[] {\n    let neighbors = [];\n    let personHours = this.state.personHours;\n    if (node.isIsolating()) {\n      // if (this.rng.random() < this.state.chanceOfIsolationAfterSymptoms) {\n      personHours *= (1-this.state.decreaseInEncountersAfterSymptoms);\n      // }\n    }\n    if (this.state.travelRadius === 0) {\n      // do nothing, just return empty list\n    } else if (this.state.travelRadius === 1 && personHours === 4) {\n      // Just the four cardinal neighbors\n      if (r > 0) {\n        neighbors.push(this.grid[r-1][c]);\n      }\n      if (c > 0) {\n        neighbors.push(this.grid[r][c-1]);\n      }\n      if (r < this.grid.length - 1) {\n        neighbors.push(this.grid[r+1][c]);\n      }\n      if (c < this.grid[0].length - 1) {\n        neighbors.push(this.grid[r][c+1]);\n      }\n    } else {\n      // Regular probabilistic neighbors\n      while (neighbors.length < personHours) {\n        let n = this.chooseRandomNeighbor(node, r, c)\n        neighbors.push(n)\n      }\n    }\n    return neighbors\n  }\n\n  togglePlayback() {\n    if (this.state.numActiveNodes === 0) {\n      // If network is dead, play button acts as reset + play button.\n      this.generate(true);\n    }\n    this.setState({\n      playing: !this.state.playing,\n    });\n  }\n\n  inInitialPosition(): boolean {\n    return this.state.infectedPerDay.length === 0;\n  }\n\n  redraw(force: boolean) {\n    if (this.canvas === null || this.canvas === undefined) {\n      console.log('no canvas');\n      return;\n    }\n\n    // actually redraw iff any of the drawing parameters have changed\n    let currentDrawingParams = [\n        this.state.drawNodeOutlines,\n        this.state.longDistaceNetworkActive,\n        this.state.personHours,\n        this.state.travelRadius,\n    ];\n    if (!force && Utils.arraysEqual(this.previousDrawingParams, currentDrawingParams)) {\n      // console.log('no draw');\n      return;\n    }\n    this.previousDrawingParams = currentDrawingParams;\n\n\n    // actually redraw iff any of the drawing parameters have changed\n    let showInteractionsParams = [\n        this.state.personHours,\n        this.state.travelRadius,\n    ];\n    let interactionsParamsChanged = !Utils.arraysEqual(this.previousInteractionsParams, showInteractionsParams);\n    this.previousInteractionsParams = showInteractionsParams;\n\n\n    // console.log('redrawing...');\n\n    let context = this.canvas.getContext('2d');\n    context.fillStyle = '#FFF';\n    context.fillRect(0, 0, this.gridWidth, this.gridWidth);\n\n    for (let r = 0; r < this.grid.length; r++) {\n      for (let c = 0; c < this.grid[r].length; c++) {\n        let node = this.grid[r][c];\n        this.drawCell(r, c, node, context, false);\n      }\n    }\n\n    // if (this.props.showInteractions &&\n    //     this.state.centerNodeNeighborsToDisplay &&\n    //     this.state.centerNodeNeighborsToDisplay.length > 0) {\n    if (this.props.showInteractions && (interactionsParamsChanged || this.inInitialPosition())) {\n      let centerR = Math.floor(this.props.gridRows / 2);\n      let centerC = centerR;\n\n      let centerNode = this.grid[centerR][centerC];\n\n      // let neighbors = this.state.centerNodeNeighborsToDisplay;\n      let neighbors = this.getNeighbors(centerNode, centerR, centerC, null);\n\n      // this.drawCell(centerR, centerC, centerNode, context, true);\n      for (let node of neighbors) {\n        this.drawCell(node.r, node.c, node, context, true);\n      }\n      for (let node of neighbors) {\n        this.drawInteraction(centerR, centerC, node.r, node.c, context)\n      }\n    }\n  }\n\n  drawInteraction(r1: number, c1: number, r2: number, c2: number, context) {\n    let w = this.nodeSize;\n\n    context.strokeStyle = '#000';\n    context.beginPath();\n    context.moveTo((c1 + 0.5) * w, (r1 + 0.5) * w);\n    context.lineTo((c2 + 0.5) * w, (r2 + 0.5) * w);\n    context.stroke();\n  }\n\n  drawCell(r: number, c: number, node: GridNode, context, highlight: boolean) {\n    let w = this.nodeSize;\n    let y = r * w;\n    let x = c * w;\n\n    if (node.isExposed()) {\n      context.fillStyle = Constants.EXPOSED_COLOR;\n    } else if (node.isInfected()) {\n      if (node.isIsolating()) {\n        context.fillStyle = Constants.ISOLATING_COLOR;\n      } else {\n        context.fillStyle = Constants.INFECTED_COLOR;\n      }\n    } else if (node.isRemoved()) {\n      context.fillStyle = Constants.REMOVED_COLOR;\n    } else if (node.isDead()) {\n      context.fillStyle = Constants.DEAD_COLOR;\n    } else {\n      // Node is susceptible\n      context.fillStyle = Constants.SUSCEPTIBLE_COLOR;\n\n      if (node.specialDegree !== null) {\n        // should be somewhere between 4 and 8\n        Utils.assert(node.specialDegree >= 4 && node.specialDegree <= 8, \"node.specialDegree should be between 4 and 8; was: \" + node.specialDegree);\n        let intensity = (node.specialDegree - 4) / 4.0;\n        context.fillStyle = Colors.hex(Colors.blend(Colors.makeHex(Grid.SUSCEPTIBLE_COLOR), Colors.makeHex('#BBB'), intensity))\n      }\n    }\n\n    let gap = 1;\n    if (this.nodeSize < 5 || this.nodeSize < this.props.nodeSize) {\n      gap = 0;\n    }\n\n    // context.fillRect(x, y, w, w);\n    context.fillRect(x, y, w - gap, w - gap);\n    // context.beginPath();\n    // context.arc(x+w/2, y+w/2, w/2-1, 0, 2 * Math.PI);\n    // context.fill();\n\n    if (highlight || (node.linked && this.state.longDistaceNetworkActive)) {\n      // context.beginPath();\n      context.lineWidth = 1;\n      context.strokeStyle = '#000';\n      let left = x - 0.5;\n      let wid = w - gap + 1;\n      if (x === 0) {\n        left = 0.5;\n        wid = wid - 1;\n      }\n      let top = y - 0.5;\n      let hei = w - gap + 1;\n      if (y === 0) {\n        top = 0.5;\n        hei = hei - 1;\n      }\n      // if (node.isIsolating()) {\n      //   context.strokeRect(left+1, top+1, wid-2, hei-2);\n      // } else {\n      context.strokeRect(left, top, wid, hei);\n      // }\n    }\n  }\n\n  static renderPercentage(fraction: number) {\n    let percent = Math.round(fraction * 100);\n    return <span><strong>{percent}</strong>%</span>;\n  }\n\n  // noinspection JSMethodCanBeStatic,JSUnusedLocalSymbols\n  renderSlider(name: string, value: number, onChange: Function, min: number, max: number, step: number,\n               renderPercentage: boolean, highlighted: boolean) {\n    let valueStr;\n    if (renderPercentage === 0) {\n      valueStr = \"\";\n    } else if (renderPercentage) {\n      valueStr = <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Grid.renderPercentage(value)}</span>;\n    } else {\n      valueStr = <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>{Math.round(value*100)/100}</strong></span>;\n    }\n\n    let highlightedClass = \"\";\n    if (highlighted) {\n      highlightedClass = \" highlighted\"\n    }\n\n    return (\n      <div className={\"slider-container\" + highlightedClass}>\n        <div className=\"slider-name\">{name}{valueStr}</div>\n        <div className=\"slider-slider\">\n          <Slider classes={{\n                    container: 'slider-slider-container',\n                    thumbIconWrapper: \"\",\n                  }}\n                  // thumb={\n                  //   <img\n                  //     alt=\"slider thumb icon\"\n                  //     src=\"/static/images/misc/circle.png\"\n                  //   />\n                  // }\n                  min={min}\n                  max={max}\n                  step={step}\n                  value={value}\n                  onChange={onChange}/>\n        </div>\n        {/*<div className=\"slider-minus\">*/}\n        {/*  <WidgetButton size=\"small\" onClick={() => onChange(null, Math.max(value - step, min))}><span className=\"plus-minus-button\">–</span></WidgetButton>*/}\n        {/*</div>*/}\n        {/*<div className=\"slider-plus\">*/}\n        {/*  <WidgetButton size=\"small\" onClick={() => onChange(null, Math.min(value + step, max))}><span className=\"plus-minus-button\">+</span></WidgetButton>*/}\n        {/*</div>*/}\n      </div>\n    );\n  }\n\n  render() {\n    this.generate();\n    this.redraw();\n\n    let showAll = this.props.showAllControls;\n\n    let transmissionProbabilitySlider = null;\n    if (showAll || this.props.showTransmissionProbabilitySlider) {\n      transmissionProbabilitySlider =\n          this.renderSlider(\"Вероятность заражения\", this.state.transmissionProbability,\n              (e, value) => { this.setState({transmissionProbability: value}); },\n              0, this.props.maxTransmissionRate, 0.01, false, this.props.highlight === \"transmissionRate\");\n    }\n\n    let immunityFractionSlider = null;\n    // if (showAll || this.props.showImmunityFractionSlider) {\n    //   let sliderName = this.props.immunitySliderName || \"Immunity\";\n    //\n    //   immunityFractionSlider =\n    //       this.renderSlider(sliderName, this.state.immunityFraction,\n    //           (e, value) => { this.setState({immunityFraction: value}); },\n    //           0, 1, 0.01, true, this.props.highlight === \"immunity\");\n    // }\n\n    let hospitalCapacitySlider = null;\n    if (showAll || this.props.showHospitalCapacitySlider) {\n      // decoy slider\n      // hospitalCapacitySlider =\n      //     this.renderSlider(\"Hospital capacity\", this.state.hospitalCapacityPct,\n      //         (e, value) => { this.setState({hospitalCapacitySliderHighlighted: true}); },\n      //         0, 1, 0.01, true, this.state.hospitalCapacitySliderHighlighted);\n      hospitalCapacitySlider =\n          this.renderSlider(\"Вместимость больниц\", this.state.hospitalCapacityPct,\n              (e, value) => { this.setState({hospitalCapacityPct: value}); },\n              0, 1, 0.01, true, false);\n\n    }\n\n    let travelRadiusSlider = null;\n    if (showAll || this.props.showTravelRadiusSlider) {\n      travelRadiusSlider =\n          this.renderSlider(\"Дальность поездок\", this.state.travelRadius,\n              (e, value) => { this.setState({travelRadius: value}); },\n              0, Math.min(30, Math.floor(this.props.gridRows/2)), 1, false, false);\n    }\n\n    let personHoursSlider = null;\n    if (showAll || this.props.showPersonHoursSlider) {\n      personHoursSlider =\n          this.renderSlider(\"Контакты в день\", this.state.personHours,\n              (e, value) => { this.setState({personHours: value}); },\n              1, 30, 1, false, false);\n    }\n\n    let daysIncubatingSlider = null;\n    if (showAll || this.props.showDaysPerStateControls) {\n      daysIncubatingSlider =\n          this.renderSlider(\"Инкубационный период(дни)\", this.state.daysIncubating,\n              (e, value) => { this.setState({daysIncubating: value}); },\n              0, 20, 1, false, false);\n    }\n\n    let daysSymptomaticSlider = null;\n    if (showAll || this.props.showDaysPerStateControls) {\n      daysSymptomaticSlider =\n          this.renderSlider(\"Болезнь с симптомами(дни)\", this.state.daysSymptomatic,\n              (e, value) => { this.setState({daysSymptomatic: value}); },\n              1, 20, 1, false, false);\n    }\n\n    let chanceOfIsolationAfterSymptomsSlider = null;\n    if (showAll || this.props.showChanceOfIsolationAfterSymptomsSlider) {\n      chanceOfIsolationAfterSymptomsSlider =\n          this.renderSlider(\"Уровень самоизоляции\", this.state.chanceOfIsolationAfterSymptoms,\n              (e, value) => { this.setState({chanceOfIsolationAfterSymptoms: value}); },\n              0, 1, 0.01, true, false);\n    }\n\n    let decreaseInEncountersAfterSymptomsSlider = null;\n    if (showAll || this.props.showDecreaseInEncountersAfterSymptomsSlider) {\n      decreaseInEncountersAfterSymptomsSlider =\n          this.renderSlider(\"Строгость самоизоляции\", this.state.decreaseInEncountersAfterSymptoms,\n              (e, value) => { this.setState({decreaseInEncountersAfterSymptoms: value}); },\n              0, 1, 0.01, true, false);\n    }\n\n    let deathRateSlider = null;\n    if (showAll || this.props.showDeathRateSlider) {\n      let sliderName = \"Уровень смертности\";\n      if (this.state.hospitalCapacityPct > -1) {\n        sliderName = \"Введите уровень смерности\";\n      }\n\n      deathRateSlider =\n          this.renderSlider(sliderName, this.state.deathRate,\n              (e, value) => { this.setState({deathRate: value}); },\n              0, 0.3, 0.01, true, false);\n    }\n\n    // let speedSlider = null;\n    // let speedMinusButton = null;\n    // let speedPlusButton = null;\n    // if (showAll || this.props.showSpeedControls) {\n    //   speedMinusButton = <WidgetButton onClick={() => { this.setState({speed: Math.max(0, this.state.speed - 0.20)}) }}>🚶</WidgetButton>;\n    //   speedPlusButton = <WidgetButton onClick={() => { this.setState({speed: Math.min(1, this.state.speed + 0.20)}) }}>🏃</WidgetButton>;\n    //   speedSlider =\n    //       this.renderSlider(\"Speed\", this.state.speed,\n    //           (e, value) => { this.setState({speed: value}); },\n    //           0, 1, 0.01, 0, false);\n    // }\n\n    let playbackControls = null;\n    if (showAll || this.props.showPlaybackControls) {\n      let newNetworkButton = <WidgetButton onClick={() => {this.setState({playing: false}); this.generate(true); this.forceUpdate();} } >Сброс</WidgetButton>;\n      let text = <span style={{fontSize: '10pt'}}>▷</span>;\n      if (this.state.playing) {\n        text = <span><b>||</b></span>;\n      }\n      let togglePlaybackButton = <WidgetButton highlighted={!this.state.playing} onClick={() => {this.togglePlayback(); } } >{text}</WidgetButton>;\n      let stepButton = <WidgetButton onClick={() => {this.simulateStep(); this.setState({playing: false}); } } >Шаг</WidgetButton>;\n\n      playbackControls =\n        <div className='playback-controls-container'>\n          {newNetworkButton}\n          {togglePlaybackButton}\n          {stepButton}\n\n          {/*{speedMinusButton}*/}\n          {/*{speedPlusButton}*/}\n        </div>\n    }\n\n    let toggleLongDistanceNetwork = null;\n    if (this.props.addLinkedNodes) {\n      let text = 'Long distance: disabled';\n      if (this.state.longDistaceNetworkActive) {\n        text = 'Long distance: enabled';\n      }\n      toggleLongDistanceNetwork = <div><span onClick={() => {this.setState({longDistaceNetworkActive: !this.state.longDistaceNetworkActive}); } } >{text}</span></div>;\n    }\n\n    let percentAliveSlider = null;\n    // if (this.props.showAliveFraction || showAll) {\n    //   let fractionAlive = this.state.numActiveNodes / (this.props.gridRows * this.props.gridCols);\n    //   // noinspection JSSuspiciousNameCombination\n    //   percentAliveSlider = <div>\n    //     <Slider style={{height: this.gridWidth, marginLeft: '0.5rem'}}\n    //             classes={{\n    //               // track: { color: 'pink', width: 50, height: 100 },\n    //               // thumb: { display: 'none' },\n    //             }}\n    //             min={0}\n    //             max={1}\n    //             value={fractionAlive}\n    //             thumb={<span/>}\n    //             vertical\n    //             />\n    //   </div>\n    // }\n\n    let protip = null;\n    if (this.props.showProTip) {\n      protip = (\n          <div style={{color: '#666', fontSize: '12pt', marginTop: '1em'}}>👆 Pro-tip: You can adjust sliders while the simulation is running.</div>\n      );\n    }\n\n    let intervalMillis = 1000 * (1-Math.pow(this.state.speed, 1/5));\n    intervalMillis = Math.max(intervalMillis, 16);\n\n    let highlightedSlider = null;\n    if (this.props.highlight === \"transmissionRate\") {\n      highlightedSlider = transmissionProbabilitySlider;\n      transmissionProbabilitySlider = null;\n    } else if (this.props.highlight === \"immunity\") {\n      highlightedSlider = immunityFractionSlider;\n      immunityFractionSlider = null;\n    }\n\n    let plot = null;\n    if (this.props.showAliveFraction) {\n      let population = this.props.gridRows * this.props.gridRows;\n      plot = <Plot hospitalCapacity={this.state.hospitalCapacityPct * population}\n                   capacityPerDay={this.state.capacityPerDay}\n                   deadPerDay={this.state.deadPerDay}\n                   infectedPerDay={this.state.infectedPerDay}\n                   population={population}\n                   recoveredPerDay={this.state.recoveredPerDay}\n                   showDeaths={this.props.showDeaths} />;\n    }\n\n    return (\n        <div className=\"widget-container\" style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n          <div style={{display: 'flex', flexDirection: 'row'}}>\n            <Waypoint onEnter={this.onEnter} onLeave={this.onLeave} scrollableAncestor={window}>\n              <canvas ref={this.canvasRef} width={this.gridWidth} height={this.gridWidth} />\n            </Waypoint>\n            {percentAliveSlider}\n          </div>\n          {playbackControls}\n          <div style={{height: \"0.5em\"}}/>\n          {highlightedSlider}\n\n          {hospitalCapacitySlider}\n          {deathRateSlider}\n          {chanceOfIsolationAfterSymptomsSlider}\n          {decreaseInEncountersAfterSymptomsSlider}\n\n          {personHoursSlider}\n          {travelRadiusSlider}\n\n          {transmissionProbabilitySlider}\n          {immunityFractionSlider}\n\n          {daysIncubatingSlider}\n          {daysSymptomaticSlider}\n\n          {toggleLongDistanceNetwork}\n\n          {protip}\n\n          {plot}\n\n\n          {/*{speedSlider}*/}\n          <Interval milliseconds={intervalMillis} callback={this.onTick} />\n        </div>\n    )\n  }\n}","import {Component} from \"react\";\nimport React from \"react\";\n\n\ntype Props = {\n  caption?: string|null,\n  title?: string|null,\n  image?: boolean,\n}\n\ntype State = {}\n\nexport default class Figure extends Component<Props, State> {\n\n  // constructor(props: Props) {\n  //   super(props);\n  // }\n\n  render() {\n    let titleDiv = null;\n    if (this.props.title !== null && this.props.title !== undefined) {\n      titleDiv = <div className=\"figure-title\">{this.props.title}</div>\n    }\n\n    let captionDiv = null;\n    if (this.props.caption !== null && this.props.caption !== undefined) {\n      captionDiv = <div className=\"figure-caption\">{this.props.caption}</div>\n    }\n\n    let cname = 'figure-body';\n    if (this.props.image) {\n      cname = 'figure-body image';\n    }\n\n    return (\n      <div className=\"figure-container\">\n        {titleDiv}\n        <div className={cname}>{this.props.children}</div>\n        {captionDiv}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport './App.css'\nimport Grid from \"./components/Grid\";\nimport NodeLegend from \"./components/NodeLegend\";\nimport Figure from \"./components/Figure\";\n\ntype Props = {\n}\n\ntype State = {\n  spoilersVisible: boolean,\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      spoilersVisible: false,\n    }\n  }\n\n  // noinspection JSMethodCanBeStatic\n  renderMainPost() {\n    let spoilerOrNot;\n    let showSpoilerButton;\n    if (!this.state.spoilersVisible) {\n      spoilerOrNot = \"spoiler\";\n      // showSpoilerButton = <WidgetButton highlighted={false} onClick={() => { this.setState({criticalThresholdVisible: true}); } } >Show spoilers</WidgetButton>\n    } else {\n      spoilerOrNot = \"spoiler-revealed\";\n      // showSpoilerButton = <WidgetButton highlighted={false} onClick={() => { this.setState({criticalThresholdVisible: false}); } } >Hide spoilers</WidgetButton>\n    }\n    showSpoilerButton = <label><span style={{cursor: \"pointer\"}}><input type=\"checkbox\" value={this.state.spoilersVisible} onChange={(e) => { this.setState({spoilersVisible: e.target.checked}); }}/> Спойлер</span></label>;\n\n\n    let exposed_you = <code className=\"code-exposed\">вы</code>;\n\n    let susceptible = <code className=\"code-susceptible\">Восприимчив</code>;\n    let infected = <code className=\"code-infectious\">Инфецирован</code>;\n    let recovered = <code className=\"code-removed\">Выздоровел</code>;\n    let dead = <code className=\"code-dead\">Умер</code>;\n    let selfQuarantined = <code className=\"code-quarantined\">Самоизолирован</code>;\n\n    // noinspection HtmlRequiredAltAttribute\n    return (\n      <div className=\"post-content\">\n        <div>\n          <h1>Заражение</h1>\n          <h5 className=\"author\">by Kevin Simler<br/>16 марта 2020</h5>\n        </div>\n        <div>\n          <span className=\"deemphasized\"><a href=\"https://www.meltingasphalt.com/interactive/outbreak/\">English</a></span><br/>\n          <span className=\"deemphasized\"><a href=\"https://www.podemosaprender.org/brote/\">en Español</a></span>\n        </div>\n        <div>\n          <a href=\"https://twitter.com/Harry_Stevens\">Harry Stevens</a> из Washington Post недавно опубликовал <em>очень</em> элегантную симуляцию того, как распространяется инфекция, такая как COVID-19. Если вы до сих пор не прочитали, то рекомендую <a href=\"https://www.washingtonpost.com/graphics/2020/world/corona-simulator/\">Why outbreaks like coronavirus\nspread exponentially, and\nhow to “flatten the curve”</a>.\n        </div>\n        <div>\n          Kevin Simler разработал <strong>игровой симулятор</strong> вспышки инфекции. \"Игровой\" означает, что вы можете менять параметры распространения (такие как перемещение или уровень смертности) и наблюдать как проходит эпидемия.\n        </div>\n        <div>\n          В конце этой статьи, Кевин надеется, вы лучше поймете, возможно лучше, чем  <em>интуитивно</em>, зачем нужно иметь это ввиду. Но сначала... \n        </div>\n        {/*<div>*/}\n        {/*  Last year, I wrote a <a href=\"https://meltingasphalt.com/interactive/going-critical/\">viral article about viral growth</a>.*/}\n        {/*</div>*/}\n        {/*<div>*/}\n        {/*  It featured <strong>playable simulations</strong> of things that spread across a population. Things like viruses (yes), but also ideas, fashions, and other trends.*/}\n        {/*</div>*/}\n        {/*<div>*/}\n        {/*  Today, in light of our current crisis, I wanted a chance to revisit these simulations. And you can play with them in just a moment. But first...*/}\n        {/*</div>*/}\n        <div>\n          <span style={{backgroundColor: '#FFC'}}><strong>ВАЖНОЕ ПРЕДУПРЕЖДЕНИЕ</strong></span>:\n        </div>\n        <div>\n          <strong>Это  <em>не</em> попытка смоделировать распространение COVID-19.</strong>\n        </div>\n        <div>\n          Это <em>упрощенная</em> модель процесса инфецирования. Цель - понять как проходят инфекции <em>в общем случае</em>.\n        </div>\n        <div>\n          <span>ПРЕДУПРЕЖДЕНИЕ №2</span>: Кевин не эпидемиолог! Надежда на специалистов по инфекционным заболеваниям (может быть это вы). Здесь могут быть ошибки, но они будут исправлены ASAP. Если вы их обнаружите, то <a href=\"https://meltingasphalt.com/contact/\">пишите письма</a>.\n        </div>\n        <div>\n          Всё понятно?\n        </div>\n        <div>\n          Погнали.\n        </div>\n        <div>\n          <h3>Сетка людей</h3>\n        </div>\n        <div>\n          Мы будем строить нашу модель медленно, по частям.\n        </div>\n        <div>\n          Инфекция не может существовать без <strong>популяции</strong>, то есть группы людей, которые потенциально могут заболеть. Наши будут размещены в колонках и строках, как здесь в поле 9x9:\n        </div>\n        <Figure>\n          <Grid daysIncubating={0}\n                daysSymptomatic={1}\n                gridRows={9}\n                gridCols={9}\n                nodeSize={30}\n                nug={1}\n                randomSeed={100}\n                personHours={4}\n                showPlaybackControls={false}\n                speed={0.4}\n                transmissionProbability={1}\n                travelRadius={1}\n          />\n        </Figure>\n        <div>\n          Каждый квадрат - это человек. Бедняга в середине, как вы можете заметить, {infected}. Предположим, все остальные {susceptible}.\n        </div>\n        <div>\n          <h3>Время</h3>\n        </div>\n        <div>\n          Давайте добавим ВРЕМЯ в нашу модель.\n        </div>\n        <div>\n          Кнопка \"Step\" (ниже) запускает симуляцию на 1 день. Вы можете нажать кнопку ▷, чтобы посмотреть, что случится в итоге:\n        </div>\n        <Figure>\n          <Grid daysIncubating={0}\n                daysSymptomatic={10000000000}\n                gridRows={9}\n                gridCols={9}\n                nodeSize={30}\n                nug={1}\n                randomSeed={100}\n                personHours={4}\n                showInteractions={false}\n                speed={0.4}\n                transmissionProbability={1}\n                travelRadius={1}\n          />\n        </Figure>\n        <div>\n          О, нет. Выглядит так, как будто каждый заражает своего соседа — сверху, снизу, справа и слева. Весь мир заболеет.\n        </div>\n        <div>\n          <h3>Выздоровление</h3>\n        </div>\n        <div>\n          Люди не могут болеть бесконечно. Давайте посмотрим, что произойдет через два шага ( 2 дня):\n        </div>\n        <Figure>\n          <Grid daysIncubating={0}\n                daysSymptomatic={2}\n                gridRows={9}\n                gridCols={9}\n                nodeSize={30}\n                nug={1}\n                randomSeed={100}\n                personHours={4}\n                showInteractions={false}\n                speed={0.4}\n                transmissionProbability={1}\n                travelRadius={1}\n          />\n        </Figure>\n        <div>\n          Отлично, теперь люди могут переходить из состояния {infected} в {recovered}.\n        </div>\n        <div>\n          Это описание состояний:\n        </div>\n        <div>\n          <ul>\n            <li><NodeLegend type=\"susceptible\"/> &nbsp;<b>Восприимчив</b></li>\n            <li><NodeLegend type=\"infected\"/> &nbsp;<b>Инфицирован</b></li>\n            <li><NodeLegend type=\"removed\"/> &nbsp;<b>Выздоровел</b></li>\n          </ul>\n        </div>\n        <div>\n          В целях симуляции, если кто-то {recovered}, он не может заразится снова. Есть надежда и, наверное, это верно для COVID-19, #ноэтонеточно.\n        </div>\n        <div>\n          <h3>Инкубационный период</h3>\n        </div>\n        <div>\n          В обсуждениях COVID-19 вы, вероятно, слышали, что у болезни длительный <strong>инкубационный период</strong>. Это время между инфецированием и появлением первых симптомов.\n        </div>\n        <div>\n          В случае с COVID-19 предполагается, что пациенты заразны в это время. Они не могут оценить себя, как больных, но могут заражать окружающих.\n        </div>\n        <div>\n          Добавим это в нашу модель инфекции. (Но помним, что мы не пытаемся смоделировать COVID-19 точно!)\n        </div>\n        <div>\n          Так выглядит инкубационный период:\n        </div>\n        <Figure>\n          <Grid gridRows={25}\n                gridCols={25}\n                nodeSize={20}\n                nug={1}\n                randomSeed={100}\n                personHours={4}\n                showDaysPerStateControls={true}\n                showInteractions={false}\n                speed={0.4}\n                transmissionProbability={1}\n                travelRadius={1}\n          />\n        </Figure>\n        <div>\n          В этой модели инфекции нет особой разницы между розовым и красным состоянием. Как только инфекция появилась, оба состояния одинаковы.\n        </div>\n        <div>\n          Тем не менее, обратите внимание, что люди в инкубационном периоде являются переносчиками COVID-19. Они не знают, что болеют, не включены в официальную статистику, вообще не переживают, что инфицированны.\n        </div>\n        <div>\n          ... не обеспокоены, что могут заразить других.\n        </div>\n        <div>\n          Когда вы читаете это, {exposed_you} можете быть таким.\n        </div>\n        <div>\n          <ul>\n            <li><NodeLegend type=\"susceptible\"/> &nbsp;<b>Восприимчив</b></li>\n            <li><NodeLegend type=\"exposed\"/> &nbsp;<b>Инфицирован (Инкубационный период, без симптомов)</b></li>\n            <li><NodeLegend type=\"infected\"/> &nbsp;<b>Инфицирован (С симптомами)</b></li>\n            <li><NodeLegend type=\"removed\"/> &nbsp;<b>Выздоровел</b></li>\n          </ul>\n        </div>\n        <div>\n          <h3>Вероятность заражения</h3>\n        </div>\n        <div>\n          Реальная инфекция не передается 100% восприимчивых. Она распространяется с некоторой вероятностью.\n        </div>\n        <div>\n          Введем новый параметр: <strong>вероятность заражения</strong>. Он отвечает за шансы на заражение от человека к человеку.\n        </div>\n        <div>\n          Сможете ли вы найти <strong>вероятность заражения</strong> при которой инфекция не распространится на всю популяцию?\n        </div>\n        <Figure>\n          <Grid gridRows={51}\n                gridCols={51}\n                maxTransmissionRate={1}\n                nodeSize={10}\n                nug={5}\n                randomSeed={99}\n                personHours={4}\n                showDaysPerStateControls={true}\n                showInteractions={false}\n                showProTip={true}\n                showTransmissionProbabilitySlider={true}\n                speed={0.9}\n                transmissionProbability={0.5}\n                travelRadius={1}\n          />\n        </Figure>\n        <div>\n          Q: Какая  <em>самая большая</em> вероятность заражения при которой инфекция не поразит всю популяцию (то есть не достигнет углов сетки)?\n        </div>\n        <div style={{marginLeft: '2em'}}>\n          {showSpoilerButton}\n        </div>\n        <div>\n          Проведя эксперименты, вы найдете <span className={spoilerOrNot}>0.35</span>, может <span className={spoilerOrNot}>0.34</span>. Тем не менее, инфекция всегда выдыхается. Всегда поражая почти всю сетку.\n        </div>\n        <div>\n          Опишем, как работает передача вируса в нашей модели.\n        </div>\n        <div>\n          Каждый день, каждый человек контактирует с <strong>ограниченным числом</strong> людей рядом.\n        </div>\n        <div>\n          В текущей модели это четыре человека рядом с ним. Изменим это ниже.\n        </div>\n        <div>\n         С каждым контактом, вероятность заражения показывает возможность заражения {susceptible} людей {infected} человеком. Высокая вероятность заражения приводит к долгому существованию инфекции.\n        </div>\n        <div>\n          В реальности, возможно различное число контактов. Вы можете встретить кого-то на улице. Или быть в автобусе с кем-то. Может быть вы угостите кого-то мороженым. В результате каждый из контактов будет заражен с некторой вероятностью. Но в нашей модели, для упрощения, вероятность одна.\n        </div>\n        <div>\n          ——\n        </div>\n        <div>\n          Прежде чем мы продолжим играть и думать о преминимости к COVID-19, держите в голове несколько соображений:\n        </div>\n        <div>\n          Вероятность заражения - это свойство <em>инфекции</em> (зависит от самой инфекции), но существуют свойства <em>окружения</em> в которых инфекция существует. Они включают в себя как свойства среды (например, температура, скорость ветра), так и социальные свойства (например, поведение людей).\n        </div>\n        <div>\n          Например, когда люди моют руки и носят маски, вероятность заражения снижается, но инфекция не изменяется.\n        </div>\n        <div>\n          Теперь для понимания, попробуем найти вероятность заражения при которой инфекция останавливается. Это \"critical threshold,\" вы можете почитать об этом подробнее  <a href=\"https://meltingasphalt.com/interactive/going-critical\">здесь</a>.\n      \n        </div>\n        <div>\n          Но COVID-19 - инфекция, для которой сложно достичь \"critical transmission rate\". Мы можем мыть руки много раз в день. Даже носить маски в местах сколения людей (всё это идет на пользу).\n        </div>\n        <div>\n          Мы <em>можем</em> надевать ОЗК при выходе из дома; технически мы решим проблему заражения (без изменения наших привычек в общении). Но это не очень практично, давайте найдем другой путь, чтобы эпидемия нас не съела.\n        </div>\n        <div>\n          <h3>Поездки</h3>\n        </div>\n        <div>\n          Есть нереалистичное допущение: мы предположили, что люди контактируют только с ближайшими соседями.\n        </div>\n        <div>\n          Что будет, если люди будут перемещаться дальше? (Мы все ещё предполагаем, что у нас 4 контакта в день. Изменим это позже.)\n        </div>\n        <div>\n          Мы добавим слайдер <strong>дальность поездок</strong> и увидим часть контактов центральной клетки, которые происходят каждый день. (Мы не можем отобразить все, положитесь на ваше воображение). В нашей модели в отличии от реальной жизни, контакты каждый день случайные.\n        </div>\n        <Figure>\n          <Grid degree={24}\n                gridRows={51}\n                gridCols={51}\n                maxTransmissionRate={1}\n                nodeSize={10}\n                nug={5}\n                personHours={4}\n                randomSeed={99}\n                showAliveFraction={true}\n                showInteractions={true}\n                // showTransmissionProbabilitySlider={true}\n                showTravelRadiusSlider={true}\n                speed={0.8}\n                travelRadius={15}\n          />\n        </Figure>\n        <div>\n          Заметьте, что если запретить поездки сразу (например дальность поездок=2), вы замедлите распространение, и это отличная новость.\n        </div>\n        <div>\n          Но, что будет, если вы не ограничите поездки. Инфекция начнет распространяться везде. \n        </div>\n        <div>\n          Другими словами, чем раньше в кривой заражения вы ограничите поездки, тем успешней вам удасться погасить вспышкую.\n        </div>\n        <div>\n          Давайте попробуем. Начнем с дао=льнось поездок = 25. Запустите симуляцию, поставьте на паузу, когда заразятся примерно 10%. Уменьшите дальность поездок до 2 и запустите. Что случилось?\n        </div>\n        <div>\n          Итого: ограничение перемещений полезно использовать, как можно раньше, для сглаживания кривой.\n        </div>\n        <div>\n          Но ограничение перемещений может помочь даже на последних стадиях по крайней мере по двум причинам:\n        </div>\n        <div>\n          <ol>\n            <li>Автобусы, поезда и аэропорты - это места, где люди собираются в ограниченном пространстве. Когда их перестают использовать, снижается число контактов с потенциальными переносчиками инфекции. (Попробуем это позже.)</li>\n            <li>Сокращение перемещений весьма эффективно <em>в сочетании с региональными мерами сдерживания</em>.  (Мы не будем их исследовать в этой статье, но если вам интересно, то почитайте <a href=\"https://necsi.edu/beyond-contact-tracing\">здесь</a>.)</li>\n          </ol>\n        </div>\n        <div>\n          <h3>Количество контактов</h3>\n        </div>\n        <div>\n          Давайте займемся этим.\n        </div>\n        <div>\n          В симуляции, вы можете изменять <strong>Количество контактов в день</strong>.\n        </div>\n        <div>\n          Начнем с 20. Какое минимально число нужно, чтобы инфекция распространялась?\n        </div>\n        <Figure>\n          <Grid degree={24}\n                gridRows={51}\n                gridCols={51}\n                personHours={20}\n                nodeSize={10}\n                nug={5}\n                randomSeed={100}\n                showAliveFraction={true}\n                showInteractions={true}\n                showPersonHoursSlider={true}\n                showTransmissionProbabilitySlider={true}\n                showTravelRadiusSlider={true}\n                speed={0.8}\n                transmissionProbability={0.3}\n                travelRadius={10}\n          />\n        </Figure>\n        {/*<div>*/}\n        {/*  Here's another question you might try to answer: <em>For a fixed number of encounters (e.g., 5 per day), how much do you need to reduce the travel radius to keep the disease in check?</em>*/}\n        {/*</div>*/}\n        <div>\n          Как вы видите, снижение числа контактов производит <em>невероятный эффект</em> на заражение. Это позволяет сильно сгладить кривую и даже остановить распространение.\n        </div>\n        <div>\n          Этого эффекта мы хотим достичь, держа \"социальную дистанцию\". Поэтому многие требуют от официальных властей ограничений массовых мероприятий и закрытия учебных заведений, и, поэтому, мы должны держаться подальше от кафе, баров и ресторанов, работать из дома, если это возможно.\n        </div>\n        <div>\n          NBA закрыло сезон, оказав неоценимую услугу своим фанатам. Теперь нужно закрыть всё.\n        </div>\n        <div>\n          Это самая важная вещь в борьбе с инфекцией (это не экспертное мнение).\n        </div>\n        <div>\n          <h3>Смерть</h3>\n        </div>\n        <div>\n          Не все пациенты выздоравливают. Многие умирают {dead}.\n        </div>\n        <div>\n          Добавим <strong>уровень смерности</strong>.\n        </div>\n        <div>\n          В нашей модели, уровень смерности - это вероятность, что пациент умрет от инфекции, учитывая, что он получит нормальное/адекватное медицинское обслуживание.\n        </div>\n        <div>\n          Уровень смерности COVID-19 определен между 1% и <a href=\"https://www.thelancet.com/journals/laninf/article/PIIS1473-3099(20)30195-X/fulltext\">6%</a>. Он может быть ниже 1%, если существует большое количество необнаруженных зараженных. Он увеличивается, если система здравохранения перегружена.\n        </div>\n        <div>\n          Мы начнем с 3%, но вы можете изменить этот параметр:\n        </div>\n        <Figure>\n          <Grid gridRows={101}\n                gridCols={101}\n                nodeSize={5}\n                nug={5}\n                randomSeed={100}\n                showAliveFraction={true}\n                showDeaths={true}\n                showDeathRateSlider={true}\n                showPersonHoursSlider={true}\n                showTransmissionProbabilitySlider={true}\n                showTravelRadiusSlider={true}\n                speed={1}\n                transmissionProbability={0.3}\n          />\n        </Figure>\n        <div>\n          Черных точек не так много. Но помните, что это человеческая жизнь, которую унесла инфекция.\n        </div>\n        <div>\n          <h3>Вместимость больниц</h3>\n        </div>\n        <div>\n          Ниже мы добавим еще один слайдер. Он отвечает за <strong>вместимость больниц</strong>.\n        </div>\n        <div>\n          Это процент населения, который больницы могут принять одномоментно.\n        </div>\n        <div>\n          Почему это важно?\n        </div>\n        <div>\n          Когда пациентов много, система здравоохранения не справляется, Они не могут осущетвлять лечение в нужном объеме. Как результат, большое количество жертв.\n        </div>\n        <div>\n          Люди говорят о вместимости больниц, как о \"количестве кроватей\" или как о \"количестве кроватей с ИВЛ\". Есть мысль, что \"кровати\" можно расставить где угодно в сжатые сроки. Может быть, реальное узкое место - это ИВЛ. #ноэтонеточно. Может быть, медицинский персонал.\n        </div>\n        <div>\n          В жизни, важно <em>всё это</em>. Мы должны находить узкие места и направлять все усилия на решение проблемы. В симуляции мы не можем указать точно. Ограничимся числом <strong>вместимость больниц</strong>.\n        </div>\n        <div>\n          В модели увидим, как работает перегрузка системы здравоохранения:\n        </div>\n        <div>\n          <strong>Когда количество заразившихся превосходит вместимость, смертность вырастает <em>вдвое</em>.</strong>\n        </div>\n        <div>\n          Попробуем. Обратите особое внимание на <em>уровень смерности</em> , он показывает как изменяется уровень смертности в условиях идеального обслуживания и без него, (график ниже).\n        </div>\n        <Figure>\n          <Grid gridRows={101}\n                gridCols={101}\n                hospitalCapacityPct={0.05}\n                nodeSize={5}\n                nug={5}\n                personHours={15}\n                randomSeed={100}\n                showAliveFraction={true}\n                showDeaths={true}\n                showDeathRateSlider={true}\n                showHospitalCapacitySlider={true}\n                // showPersonHoursSlider={true}\n                // showTransmissionProbabilitySlider={true}\n                // showTravelRadiusSlider={true}\n                speed={1}\n                transmissionProbability={0.28}\n                travelRadius={15}\n          />\n        </Figure>\n        <div>\n          <h3>\"Сглаживание кривой\"</h3>\n        </div>\n        <div>\n          Вы наверняка слышали это раньше. Почему это важно? Сейчас вы получите возможность понять.\n        </div>\n        \n        <div>\n          Уровень смерности установлен на 3%. Вместимость больниц равна 5%.\n        </div>\n        <div>\n          Попробуйте и увидите, что реальный уровень смерности 6%. Попробуйте снизить.\n        </div>\n        <div>\n          Другими словами, сгладьте кривую:\n        </div>\n        <Figure>\n          <Grid gridRows={101}\n                gridCols={101}\n                hospitalCapacityPct={0.05}\n                nodeSize={5}\n                nug={5}\n                personHours={15}\n                randomSeed={100}\n                showAliveFraction={true}\n                showDeaths={true}\n                // showDeathRateSlider={true}\n                // showHospitalCapacitySlider={true}\n                showPersonHoursSlider={true}\n                showTransmissionProbabilitySlider={true}\n                showTravelRadiusSlider={true}\n                speed={1}\n                transmissionProbability={0.4}\n                travelRadius={15}\n          />\n        </Figure>\n        <div>\n          Мы играем в симуляции, но реальность <em>намного сложнее</em>. Настоящие люди не ведут себя в соответствии с движениями слайдера на сайте.\n        </div>\n        <div>\n          Гланое: если мы не сгладим кривую, то это может привести к тяжелым последствиям. Мы можем потерять миллионы жизней.\n        </div>\n        <div>\n          Мы не хотим больших потерь. Но пока инфекция распространяется, последствия непредсказуемы. \n        </div>\n        <div>\n          Мы должны начать действовать прямо сейчас.\n        </div>\n        <div>\n          Не передвигайтесь. Не выходите на улицу. Не ходите в гости и не приглашайте к себе (даже родителей). Остановите все активности, которые могут представлять опасность. Если что-то запланировали - <em>отменяйте</em>. Закройтесь. Полностью.\n        </div>\n        <div>\n          Пожалуйста, делайте всё возможное.\n        </div>\n        <div>\n          COVID-19 пришёл, и его не остановить полумерами.\n        </div>\n\n\n\n\n\n\n\n        <div>\n          &nbsp;\n        </div>\n        <div>\n          <a name=\"self-quarantine\"/>\n          <h3>Самоизоляция</h3>\n        </div>\n        <div>\n          (Thanks to <a href=\"https://twitter.com/jasonlegate\">Jason Legate</a> for suggesting and coding this addition to the disease model.)\n        </div>\n        <div>\n          В этой модели, вы можете изменить <strong>уровень самоизоляции</strong>, например, человек самоизолируется, как только почувствует симптомы. {selfQuarantined} будут окрашены синим вместо красного.\n        </div>\n        <div>\n          Дополнительно, вы можете изменять <strong>строгость самоизоляции</strong>. 100 процентов означает, что число контактов пациента рано 0. 0% означает, что он контактирует в обычном режиме. Функция между значениями линейная.\n        </div>\n        <div>\n          Начнем с 25% на самоизоляции и строгостью 25%. Поможет ли это остановить инфекцию?\n        </div>\n        <Figure>\n          <Grid degree={24}\n                gridRows={51}\n                gridCols={51}\n                personHours={20}\n                nodeSize={10}\n                nug={5}\n                randomSeed={100}\n                showAliveFraction={true}\n                showInteractions={true}\n                showPersonHoursSlider={true}\n                showTransmissionProbabilitySlider={true}\n                showChanceOfIsolationAfterSymptomsSlider={true}\n                showDecreaseInEncountersAfterSymptomsSlider={true}\n                showTravelRadiusSlider={true}\n                speed={0.8}\n                transmissionProbability={0.21}\n                travelRadius={20}\n          />\n        </Figure>\n        <div>\n          Как вы видите, добровольная самоизоляция (при появлении симптомов), останавливает распространение. К сожалению, симптомы появляются позже, чем человек становится переносчиком инфекции. Поэтому, её сложно остановить.\n        </div>\n        <div>\n          Для большинства инфекций, самоизоляция не решает проблему. Но это один из способов, не исключающий многих других (лучшую гигиену, ограничение общения и перемещений). Мы <em>вместе</em> можем начать контролировать распространение. \n        </div>\n\n\n        <div>\n          &nbsp;\n        </div>\n        <div>\n          &nbsp;\n        </div>\n        <div>\n          ——\n        </div>\n        <div>\n          &nbsp;\n        </div>\n        {/*<div>*/}\n        {/*  Thanks for reading. If this has been helpful, I hope you'll consider sharing.*/}\n        {/*</div>*/}\n        <div>\n          <a href=\"https://twitter.com/kapter666\">Перевод на русский: @kapter666</a>\n        </div>\n        <div>\n          <b>License</b>\n        </div>\n        <div>\n          <a href=\"https://creativecommons.org/share-your-work/public-domain/cc0/\">CC0</a> — no rights reserved. You're free to use this work however you see fit, including copying it, modifying it, and distributing it on your own site.\n        </div>\n        <div>\n          <a href=\"https://github.com/kevinsimler/outbreak\">Source code</a>\n        </div>\n        \n        <div>\n          <b>Full model</b>\n        </div>\n        <div>\n          The full model, with all sliders exposed, can be found at the very bottom of the page.\n        </div>\n        <div>\n          <b>Acknowledgments</b>\n        </div>\n        <div>\n          I'd like to thank <a href=\"https://twitter.com/nsbarr\">Nick Barr</a>, <a href=\"https://twitter.com/origiful\">Ian Padgham</a>, <a href=\"https://twitter.com/frooblor\">Diana Huang</a>, Kellie Jack, <a href=\"https://twitter.com/btnaughton\">Brian Naughton</a>, <a href=\"https://twitter.com/yaneerbaryam\">Yaneer Bar-Yam</a>, and <a href=\"https://twitter.com/adamdangelo\">Adam D'Angelo</a> for helpful feedback and encouragement.\n        </div>\n        <div>\n          <b>Further reading</b>\n        </div>\n        <div>\n          <ul>\n            <li><a href=\"https://medium.com/@tomaspueyo/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca\">Coronavirus: Why You Must Act Now</a> — Tomas Pueyo explains why we've been systematically underestimating this thing, and why that needs to change. Just read it.</li>\n            <li><a href=\"https://medium.com/@joschabach/flattening-the-curve-is-a-deadly-delusion-eea324fe9727\">Don’t \"Flatten the Curve,\" Stop It!</a> — Joscha Bach does some calculations on hospital capacity and concludes that \"flattening the curve\" won't be enough; we have to completely stop the outbreak.</li>\n            <li>The Washington Post's <a href=\"https://www.washingtonpost.com/graphics/2020/world/corona-simulator/\">excellent simulation</a> — brilliant use of billiard balls to show transmission and social distancing.</li>\n            <li><a href=\"https://meltingasphalt.com/interactive/going-critical/\">Going Critical</a> — my previous exploration of diffusion and viral growth processes, including the nuclear reactions and the growth of knowledge.</li>\n          </ul>\n        </div>\n\n        {this.renderEndOfPostDivider(true)}\n\n        <div className=\"subscription-footer\">\n          <a href=\"https://meltingasphalt.com\"><strong>Melting Asphalt</strong></a> is maintained by <span className=\"nohyphen\">Kevin</span> <span className=\"nohyphen\">Simler</span>.<br/><br/> I publish <em>very infrequently</em>, so you might want to get notified about new posts:<br/>\n          {this.renderSubscribeForm()}\n          {/*<div style={{textAlign: 'center', fontSize: '10pt', color: '#666', marginTop: '0.5em'}}>(This is a <em>very low frequency</em> mailing list. Pinky swear.)</div>*/}\n          <br/>You can also <a href=\"https://twitter.com/KevinSimler\"><strong>find me on Twitter</strong></a>.\n          <div>&nbsp;</div>\n        </div>\n        <div>\n          <h3>Полная модель</h3>\n        </div>\n        <Figure>\n          <Grid gridRows={101}\n                gridCols={101}\n                // highlight=\"transmissionRate\"\n                hospitalCapacityPct={0.05}\n                nodeSize={5}\n                nug={5}\n                randomSeed={100}\n                showAliveFraction={true}\n                showAllControls={true}\n                // showDaysPerStateControls={true}\n                showDeaths={true}\n                // showPersonHoursSlider={true}\n                // showTransmissionProbabilitySlider={true}\n                // showTravelRadiusSlider={true}\n                speed={1}\n          />\n        </Figure>\n\n      </div>\n    );\n  }\n\n  renderSubscribeForm() {\n    return (\n      <form method=\"post\" action=\"https://meltingasphalt.us8.list-manage.com/subscribe/post?u=0bc9d741e167733d20c520ea6&amp;id=57ebd9b4a6\" id=\"mc4wp-form-1\" className=\"form mc4wp-form\"><input type=\"email\" id=\"mc4wp_email\" name=\"EMAIL\" placeholder=\"Enter your email\" required />\n        <input type=\"submit\" value=\"Subscribe\" />\n        <textarea name=\"_mc4wp_required_but_not_really\" style={{display: \"none\"}}/><input type=\"hidden\" name=\"_mc4wp_form_submit\" value=\"1\" /><input type=\"hidden\" name=\"_mc4wp_form_instance\" value=\"1\" /><input type=\"hidden\" name=\"_mc4wp_form_nonce\" value=\"8a45344b67\" />\n      </form>\n    )\n  }\n\n  renderEndOfPostDivider(showTimestamp: boolean) {\n    let timestamp = \"\";\n    let divider = <span>——</span>;\n    if (showTimestamp) {\n      timestamp = \"Originally published March 16, 2020.\";\n      divider = <img src=\"https://meltingasphalt.com/wp-content/themes/responsive/core/images/flourish.svg\" width={50} alt=\"——\" />;\n    }\n\n    return (\n      <div style={{textAlign: \"center\"}}>\n        <div className=\"end-of-post-divider\">\n          {divider}\n        </div>\n        <div className=\"signature-line\">\n          {timestamp}\n        </div>\n      </div>\n    );\n  }\n\n  renderHeader() {\n    return (\n        <div id=\"header\">\n          <div id=\"logo\" className=\"branded\">\n            <span className=\"site-name\">\n              <a href=\"https://meltingasphalt.com/\" title=\"Melting Asphalt\" rel=\"home\">\n                <img id=\"nav-logo\" src=\"https://meltingasphalt.com/wp-content/themes/responsive/core/images/ma.svg\" />\n                                        &nbsp;&nbsp;Melting Asphalt\n              </a>\n            </span>\n          </div>\n        </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"main-container\">\n        <div className=\"header\">\n          {this.renderHeader()}\n        </div>\n        <div className=\"blank-l\"/>\n        <div className=\"content\">\n          {this.renderMainPost()}\n        </div>\n        <div className=\"blank-r\"/>\n        <div className=\"footer\"/>\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}